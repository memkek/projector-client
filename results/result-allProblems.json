{"version":"3","listProblem":[{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Control flow with empty body",
  "severity": "High",
  "comment": "'for' has empty body",
  "detailsInfo": "<html>\n<body>\nThis inspection reports that <b>if</b>, <b>when</b>, <b>for</b>, <b>while</b> and also expressions has empty body.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/intTest/kotlin/org/jetbrains/projector/intTest/CloseBlockingTest.kt",
      "language": "kotlin",
      "line": 94,
      "offset": 6,
      "length": 3,
      "code": {
        "startLine": 92,
        "length": 3,
        "offset": 43,
        "surroundingCode": "      clientLoadNotifier.send(Unit)\n\n      for (frame in incoming) {\n        // maintaining connection\n      }"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.intTest",
    "inspectionName": "ControlFlowWithEmptyBody"
  },
  "hash": 147456970892796815
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Control flow with empty body",
  "severity": "High",
  "comment": "'for' has empty body",
  "detailsInfo": "<html>\n<body>\nThis inspection reports that <b>if</b>, <b>when</b>, <b>for</b>, <b>while</b> and also expressions has empty body.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/intTest/kotlin/org/jetbrains/projector/intTest/IdeWindowParameterTest.kt",
      "language": "kotlin",
      "line": 76,
      "offset": 6,
      "length": 3,
      "code": {
        "startLine": 74,
        "length": 3,
        "offset": 43,
        "surroundingCode": "      clientLoadNotifier.send(Unit)\n\n      for (frame in incoming) {\n        // maintaining connection\n      }"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.intTest",
    "inspectionName": "ControlFlowWithEmptyBody"
  },
  "hash": 491337943240280341
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Control flow with empty body",
  "severity": "High",
  "comment": "'for' has empty body",
  "detailsInfo": "<html>\n<body>\nThis inspection reports that <b>if</b>, <b>when</b>, <b>for</b>, <b>while</b> and also expressions has empty body.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/intTest/kotlin/org/jetbrains/projector/intTest/IdeWindowParameterTest.kt",
      "language": "kotlin",
      "line": 101,
      "offset": 6,
      "length": 3,
      "code": {
        "startLine": 99,
        "length": 3,
        "offset": 43,
        "surroundingCode": "      clientLoadNotifier.send(Unit)\n\n      for (frame in incoming) {\n        // maintaining connection\n      }"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.intTest",
    "inspectionName": "ControlFlowWithEmptyBody"
  },
  "hash": 319790021975536497
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Control flow with empty body",
  "severity": "High",
  "comment": "'for' has empty body",
  "detailsInfo": "<html>\n<body>\nThis inspection reports that <b>if</b>, <b>when</b>, <b>for</b>, <b>while</b> and also expressions has empty body.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/intTest/kotlin/org/jetbrains/projector/intTest/IdeWindowParameterTest.kt",
      "language": "kotlin",
      "line": 126,
      "offset": 6,
      "length": 3,
      "code": {
        "startLine": 124,
        "length": 3,
        "offset": 43,
        "surroundingCode": "      clientLoadNotifier.send(Unit)\n\n      for (frame in incoming) {\n        // maintaining connection\n      }"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.intTest",
    "inspectionName": "ControlFlowWithEmptyBody"
  },
  "hash": 1388168991536468686
},{
  "tool": "Code Inspection",
  "category": "Probable bugs",
  "type": "Control flow with empty body",
  "severity": "High",
  "comment": "'for' has empty body",
  "detailsInfo": "<html>\n<body>\nThis inspection reports that <b>if</b>, <b>when</b>, <b>for</b>, <b>while</b> and also expressions has empty body.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/intTest/kotlin/org/jetbrains/projector/intTest/IdeWindowParameterTest.kt",
      "language": "kotlin",
      "line": 151,
      "offset": 6,
      "length": 3,
      "code": {
        "startLine": 149,
        "length": 3,
        "offset": 43,
        "surroundingCode": "      clientLoadNotifier.send(Unit)\n\n      for (frame in incoming) {\n        // maintaining connection\n      }"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.intTest",
    "inspectionName": "ControlFlowWithEmptyBody"
  },
  "hash": 6341108372463602120
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused import directive",
  "severity": "High",
  "comment": "Unused import directive",
  "detailsInfo": "<html>\n<body>\nThis inspection reports <b>import</b> statements in Kotlin code that are unused.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/websocket/HttpWsServer.kt",
      "language": "kotlin",
      "line": 44,
      "offset": 0,
      "length": 18,
      "code": {
        "startLine": 42,
        "length": 18,
        "offset": 61,
        "surroundingCode": "import java.net.InetSocketAddress\nimport java.nio.ByteBuffer\nimport java.util.*\nimport java.util.concurrent.locks.ReentrantLock\nimport kotlin.concurrent.withLock\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "KotlinUnusedImport"
  },
  "hash": -2217359877377909182
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused import directive",
  "severity": "High",
  "comment": "Unused import directive",
  "detailsInfo": "<html>\n<body>\nThis inspection reports <b>import</b> statements in Kotlin code that are unused.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-swing/src/main/kotlin/org/jetbrains/projector/client/swing/ProjectorTransport.kt",
      "language": "kotlin",
      "line": 29,
      "offset": 0,
      "length": 45,
      "code": {
        "startLine": 27,
        "length": 45,
        "offset": 158,
        "surroundingCode": "import org.jetbrains.projector.client.common.protocol.SerializationToServerMessageEncoder\nimport org.jetbrains.projector.common.protocol.toServer.ClientEvent\nimport java.util.concurrent.CompletableFuture\nimport java.util.concurrent.CompletionStage\n\ninterface ProjectorTransport {"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-swing.main",
    "inspectionName": "KotlinUnusedImport"
  },
  "hash": 7038240237125474283
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused import directive",
  "severity": "High",
  "comment": "Unused import directive",
  "detailsInfo": "<html>\n<body>\nThis inspection reports <b>import</b> statements in Kotlin code that are unused.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-swing/src/main/kotlin/org/jetbrains/projector/client/swing/JFrameWindowManager.kt",
      "language": "kotlin",
      "line": 33,
      "offset": 0,
      "length": 57,
      "code": {
        "startLine": 31,
        "length": 57,
        "offset": 123,
        "surroundingCode": "import org.jetbrains.projector.common.protocol.toServer.ResizeDirection\nimport org.jetbrains.projector.util.logging.Logger\nimport org.jetbrains.projector.util.logging.loggerFactory\nimport java.awt.Dimension\nimport java.awt.Point\nimport java.awt.event.*"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-swing.main",
    "inspectionName": "KotlinUnusedImport"
  },
  "hash": 7008098918368940322
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused import directive",
  "severity": "High",
  "comment": "Unused import directive",
  "detailsInfo": "<html>\n<body>\nThis inspection reports <b>import</b> statements in Kotlin code that are unused.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-common/src/jvmMain/kotlin/org/jetbrains/projector/client/common/misc/TimeStamp.kt",
      "language": "kotlin",
      "line": 27,
      "offset": 0,
      "length": 18,
      "code": {
        "startLine": 25,
        "length": 18,
        "offset": 26,
        "surroundingCode": "\nimport java.time.Instant\nimport java.util.*\n\nactual object TimeStamp {\n  actual val current: Double\n    get() = Instant.now().toEpochMilli().toDouble()"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-common.jvmMain",
    "inspectionName": "KotlinUnusedImport"
  },
  "hash": -2284195431811039562
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused import directive",
  "severity": "High",
  "comment": "Unused import directive",
  "detailsInfo": "<html>\n<body>\nThis inspection reports <b>import</b> statements in Kotlin code that are unused.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-common/src/jvmMain/kotlin/org/jetbrains/projector/client/common/canvas/SwingContext2d.kt",
      "language": "kotlin",
      "line": 33,
      "offset": 0,
      "length": 26,
      "code": {
        "startLine": 31,
        "length": 26,
        "offset": 55,
        "surroundingCode": "import java.awt.*\nimport java.awt.geom.AffineTransform\nimport java.awt.geom.Arc2D\nimport java.awt.geom.Path2D\nimport java.awt.geom.RoundRectangle2D\nimport java.io.File"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-common.jvmMain",
    "inspectionName": "KotlinUnusedImport"
  },
  "hash": -658405226331981518
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused import directive",
  "severity": "High",
  "comment": "Unused import directive",
  "detailsInfo": "<html>\n<body>\nThis inspection reports <b>import</b> statements in Kotlin code that are unused.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-common/src/jvmMain/kotlin/org/jetbrains/projector/client/common/canvas/SwingContext2d.kt",
      "language": "kotlin",
      "line": 36,
      "offset": 0,
      "length": 19,
      "code": {
        "startLine": 34,
        "length": 19,
        "offset": 66,
        "surroundingCode": "import java.awt.geom.Path2D\nimport java.awt.geom.RoundRectangle2D\nimport java.io.File\n\nclass SwingContext2d(graphics: Graphics2D) : Context2d {\n  private var savedGraphics: Graphics2D = graphics.create() as Graphics2D\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-common.jvmMain",
    "inspectionName": "KotlinUnusedImport"
  },
  "hash": 5648156260396577087
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Return or assignment can be lifted out",
  "severity": "Info",
  "comment": "Return can be lifted out of 'try'",
  "detailsInfo": "<html>\n<body>\nThis inspection reports <b>if</b>, <b>when</b> and <b>try</b> statements that can be converted to expressions\nby lifting a return or an assignment out. Typical example:\n<br /><br />\n\n<pre>\n<b>fun</b> foo(arg: Boolean): String {\n    <b>when</b> (arg) {\n        <b>true</b> -> <b>return</b> \"Truth\"\n        <b>false</b> -> <b>return</b> \"Falsehood\"\n    }\n}\n</pre>\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/intTest/kotlin/org/jetbrains/projector/intTest/CloseBlockingTest.kt",
      "language": "kotlin",
      "line": 56,
      "offset": 6,
      "length": 3,
      "code": {
        "startLine": 54,
        "length": 3,
        "offset": 51,
        "surroundingCode": "\n    private fun isAlertPresent(): Boolean {\n      try {\n        val wait = WebDriverWait(WebDriverRunner.getWebDriver(), 5)\n        return wait.until(ExpectedConditions.alertIsPresent()) != null"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.intTest",
    "inspectionName": "LiftReturnOrAssignment"
  },
  "hash": 4549542417317996869
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Return or assignment can be lifted out",
  "severity": "Info",
  "comment": "Return can be lifted out of 'try'",
  "detailsInfo": "<html>\n<body>\nThis inspection reports <b>if</b>, <b>when</b> and <b>try</b> statements that can be converted to expressions\nby lifting a return or an assignment out. Typical example:\n<br /><br />\n\n<pre>\n<b>fun</b> foo(arg: Boolean): String {\n    <b>when</b> (arg) {\n        <b>true</b> -> <b>return</b> \"Truth\"\n        <b>false</b> -> <b>return</b> \"Falsehood\"\n    }\n}\n</pre>\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/intTest/kotlin/org/jetbrains/projector/intTest/NotSecureAlertTest.kt",
      "language": "kotlin",
      "line": 49,
      "offset": 6,
      "length": 3,
      "code": {
        "startLine": 47,
        "length": 3,
        "offset": 51,
        "surroundingCode": "\n    private fun isAlertPresent(): Boolean {\n      try {\n        val wait = WebDriverWait(WebDriverRunner.getWebDriver(), 5)\n        return wait.until(ExpectedConditions.alertIsPresent()) != null"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.intTest",
    "inspectionName": "LiftReturnOrAssignment"
  },
  "hash": -2432600114372283294
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'jsonConfiguration' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-common/src/commonMain/kotlin/org/jetbrains/projector/common/protocol/toClient/KotlinxJsonServerEventSerializer.kt",
      "language": "kotlin",
      "line": 32,
      "offset": 6,
      "length": 17,
      "code": {
        "startLine": 30,
        "length": 17,
        "offset": 49,
        "surroundingCode": "object KotlinxJsonServerEventSerializer {\n\n  val jsonConfiguration: JsonBuilder.() -> Unit = {\n    useArrayPolymorphism = true\n    encodeDefaults = true  // this is needed because our manual json parser can't handle nulls instead of empty lists"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-common.commonMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": 7531748629208018402
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'showCallback' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/md/PanelUpdater.kt",
      "language": "kotlin",
      "line": 40,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 38,
        "length": 6,
        "offset": 49,
        "surroundingCode": "  private val logger = Logger<PanelUpdater>()\n\n  public var showCallback: ((id: Int, shown: Boolean) -> Unit)? = null\n  public var resizeCallback: ((id: Int, size: Dimension) -> Unit)? = null\n  public var moveCallback: ((id: Int, pos: Point) -> Unit)? = null"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": -2328383409740811628
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'resizeCallback' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/md/PanelUpdater.kt",
      "language": "kotlin",
      "line": 41,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 39,
        "length": 6,
        "offset": 74,
        "surroundingCode": "\n  public var showCallback: ((id: Int, shown: Boolean) -> Unit)? = null\n  public var resizeCallback: ((id: Int, size: Dimension) -> Unit)? = null\n  public var moveCallback: ((id: Int, pos: Point) -> Unit)? = null\n  public var disposeCallback: ((id: Int) -> Unit)? = null"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": -8245938799167506560
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'moveCallback' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/md/PanelUpdater.kt",
      "language": "kotlin",
      "line": 42,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 40,
        "length": 6,
        "offset": 147,
        "surroundingCode": "  public var showCallback: ((id: Int, shown: Boolean) -> Unit)? = null\n  public var resizeCallback: ((id: Int, size: Dimension) -> Unit)? = null\n  public var moveCallback: ((id: Int, pos: Point) -> Unit)? = null\n  public var disposeCallback: ((id: Int) -> Unit)? = null\n  public var placeToWindowCallback: ((id: Int, rootComponent: Component?) -> Unit)? = null"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": -1324066666623854008
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'disposeCallback' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/md/PanelUpdater.kt",
      "language": "kotlin",
      "line": 43,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 41,
        "length": 6,
        "offset": 143,
        "surroundingCode": "  public var resizeCallback: ((id: Int, size: Dimension) -> Unit)? = null\n  public var moveCallback: ((id: Int, pos: Point) -> Unit)? = null\n  public var disposeCallback: ((id: Int) -> Unit)? = null\n  public var placeToWindowCallback: ((id: Int, rootComponent: Component?) -> Unit)? = null\n  public var setHtmlCallback: ((id: Int, lastChangedHtml: String) -> Unit)? = null"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": -2764337706066962672
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'placeToWindowCallback' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/md/PanelUpdater.kt",
      "language": "kotlin",
      "line": 44,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 42,
        "length": 6,
        "offset": 127,
        "surroundingCode": "  public var moveCallback: ((id: Int, pos: Point) -> Unit)? = null\n  public var disposeCallback: ((id: Int) -> Unit)? = null\n  public var placeToWindowCallback: ((id: Int, rootComponent: Component?) -> Unit)? = null\n  public var setHtmlCallback: ((id: Int, lastChangedHtml: String) -> Unit)? = null\n  public var setCssCallback: ((id: Int, lastCssString: String) -> Unit)? = null"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": -5786119000384431279
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'setHtmlCallback' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/md/PanelUpdater.kt",
      "language": "kotlin",
      "line": 45,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 43,
        "length": 6,
        "offset": 151,
        "surroundingCode": "  public var disposeCallback: ((id: Int) -> Unit)? = null\n  public var placeToWindowCallback: ((id: Int, rootComponent: Component?) -> Unit)? = null\n  public var setHtmlCallback: ((id: Int, lastChangedHtml: String) -> Unit)? = null\n  public var setCssCallback: ((id: Int, lastCssString: String) -> Unit)? = null\n  public var scrollCallback: ((id: Int, lastScrollOffset: Int) -> Unit)? = null"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": 1520225422576869428
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'setCssCallback' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/md/PanelUpdater.kt",
      "language": "kotlin",
      "line": 46,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 44,
        "length": 6,
        "offset": 176,
        "surroundingCode": "  public var placeToWindowCallback: ((id: Int, rootComponent: Component?) -> Unit)? = null\n  public var setHtmlCallback: ((id: Int, lastChangedHtml: String) -> Unit)? = null\n  public var setCssCallback: ((id: Int, lastCssString: String) -> Unit)? = null\n  public var scrollCallback: ((id: Int, lastScrollOffset: Int) -> Unit)? = null\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": -6269652498830163030
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'scrollCallback' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/md/PanelUpdater.kt",
      "language": "kotlin",
      "line": 47,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 45,
        "length": 6,
        "offset": 165,
        "surroundingCode": "  public var setHtmlCallback: ((id: Int, lastChangedHtml: String) -> Unit)? = null\n  public var setCssCallback: ((id: Int, lastCssString: String) -> Unit)? = null\n  public var scrollCallback: ((id: Int, lastScrollOffset: Int) -> Unit)? = null\n\n  public fun openInExternalBrowser(link: String) {"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": 6482590996300404054
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'setHtml' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/md/PanelDelegate.kt",
      "language": "kotlin",
      "line": 132,
      "offset": 6,
      "length": 7,
      "code": {
        "startLine": 130,
        "length": 7,
        "offset": 11,
        "surroundingCode": "  }\n\n  fun setHtml(html: String) {\n    try {\n      var changedHtml = html"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": 5709921858953055675
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'scrollToMarkdownSrcOffset' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/md/PanelDelegate.kt",
      "language": "kotlin",
      "line": 160,
      "offset": 6,
      "length": 25,
      "code": {
        "startLine": 158,
        "length": 25,
        "offset": 11,
        "surroundingCode": "  }\n\n  fun scrollToMarkdownSrcOffset(offset: Int) {\n    lastScrollOffset = offset\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": -6249467146166560008
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'colors' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/IdeColors.kt",
      "language": "kotlin",
      "line": 42,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 40,
        "length": 6,
        "offset": 46,
        "surroundingCode": "  private val logger = Logger<IdeColors>()\n\n  public var colors: ServerWindowColorsEvent.ColorsStorage? = null\n    private set\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": -5560119258094599888
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'DEFAULT_PORT' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/intTest/kotlin/org/jetbrains/projector/intTest/ConnectionUtil.kt",
      "language": "kotlin",
      "line": 58,
      "offset": 12,
      "length": 12,
      "code": {
        "startLine": 56,
        "length": 12,
        "offset": 37,
        "surroundingCode": "object ConnectionUtil {\n\n  const val DEFAULT_PORT = 8887\n\n  private val clientFile = File(\"../projector-client-web/build/distributions/index.html\")"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.intTest",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": 5395950176750268378
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'transport' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-swing/src/main/kotlin/org/jetbrains/projector/client/swing/SwingClient.kt",
      "language": "kotlin",
      "line": 45,
      "offset": 22,
      "length": 9,
      "code": {
        "startLine": 43,
        "length": 9,
        "offset": 48,
        "surroundingCode": "import javax.swing.Timer\n\nclass SwingClient(val transport: ProjectorTransport, val windowManager: AbstractWindowManager<*>) {\n  val logger = Logger<SwingClient>()\n  val timer = Timer(100) {"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-swing.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": -6093519685634997944
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'windowManager' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-swing/src/main/kotlin/org/jetbrains/projector/client/swing/SwingClient.kt",
      "language": "kotlin",
      "line": 45,
      "offset": 57,
      "length": 13,
      "code": {
        "startLine": 43,
        "length": 13,
        "offset": 83,
        "surroundingCode": "import javax.swing.Timer\n\nclass SwingClient(val transport: ProjectorTransport, val windowManager: AbstractWindowManager<*>) {\n  val logger = Logger<SwingClient>()\n  val timer = Timer(100) {"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-swing.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": -6907238027752755330
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'logger' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-swing/src/main/kotlin/org/jetbrains/projector/client/swing/SwingClient.kt",
      "language": "kotlin",
      "line": 46,
      "offset": 6,
      "length": 6,
      "code": {
        "startLine": 44,
        "length": 6,
        "offset": 107,
        "surroundingCode": "\nclass SwingClient(val transport: ProjectorTransport, val windowManager: AbstractWindowManager<*>) {\n  val logger = Logger<SwingClient>()\n  val timer = Timer(100) {\n    val requests = ImageCacher.extractImagesToRequest()"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-swing.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": -6881032557158106915
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'timer' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-swing/src/main/kotlin/org/jetbrains/projector/client/swing/SwingClient.kt",
      "language": "kotlin",
      "line": 47,
      "offset": 6,
      "length": 5,
      "code": {
        "startLine": 45,
        "length": 5,
        "offset": 143,
        "surroundingCode": "class SwingClient(val transport: ProjectorTransport, val windowManager: AbstractWindowManager<*>) {\n  val logger = Logger<SwingClient>()\n  val timer = Timer(100) {\n    val requests = ImageCacher.extractImagesToRequest()\n    if (requests.isNotEmpty())"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-swing.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": -5453063684969483675
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'processEvent' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-swing/src/main/kotlin/org/jetbrains/projector/client/swing/SwingClient.kt",
      "language": "kotlin",
      "line": 63,
      "offset": 6,
      "length": 12,
      "code": {
        "startLine": 61,
        "length": 12,
        "offset": 11,
        "surroundingCode": "  }\n\n  fun processEvent(serverEvent: ServerEvent) {\n    Do exhaustive when(serverEvent) {\n      is ServerImageDataReplyEvent -> ImageCacher.putImageData(serverEvent.imageId, serverEvent.imageData)"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-swing.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": -4505621130135987044
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'canvas' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-swing/src/main/kotlin/org/jetbrains/projector/client/swing/ProjectorViewPanel.kt",
      "language": "kotlin",
      "line": 34,
      "offset": 34,
      "length": 6,
      "code": {
        "startLine": 32,
        "length": 6,
        "offset": 61,
        "surroundingCode": "import javax.swing.JPanel\n\nopen class ProjectorViewPanel(val canvas: SwingCanvas, val connectionTime: Long, var appliedCanvasScale: Double = 1.0) : JPanel() {\n  override fun paintComponent(g: Graphics) {\n    g.drawImage(canvas.image, 0, 0, (canvas.image.width * appliedCanvasScale).toInt(), (canvas.image.height * appliedCanvasScale).toInt(), this)"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-swing.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": -2736148557390823045
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'appliedCanvasScale' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-swing/src/main/kotlin/org/jetbrains/projector/client/swing/ProjectorViewPanel.kt",
      "language": "kotlin",
      "line": 34,
      "offset": 85,
      "length": 18,
      "code": {
        "startLine": 32,
        "length": 18,
        "offset": 112,
        "surroundingCode": "import javax.swing.JPanel\n\nopen class ProjectorViewPanel(val canvas: SwingCanvas, val connectionTime: Long, var appliedCanvasScale: Double = 1.0) : JPanel() {\n  override fun paintComponent(g: Graphics) {\n    g.drawImage(canvas.image, 0, 0, (canvas.image.width * appliedCanvasScale).toInt(), (canvas.image.height * appliedCanvasScale).toInt(), this)"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-swing.main",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": 3202274708594308662
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'SYSTEM_SCALING_RATIO' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-common/src/jsMain/kotlin/org/jetbrains/projector/client/common/misc/ParamsProvider.kt",
      "language": "kotlin",
      "line": 69,
      "offset": 6,
      "length": 20,
      "code": {
        "startLine": 67,
        "length": 20,
        "offset": 56,
        "surroundingCode": "  private const val DEFAULT_BLOCK_CLOSING = true\n\n  val SYSTEM_SCALING_RATIO\n    get() = window.devicePixelRatio  // get every time because it can be changed\n  val USER_SCALING_RATIO: Double\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-common.jsMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": -2881831388730598281
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'USER_SCALING_RATIO' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-common/src/jsMain/kotlin/org/jetbrains/projector/client/common/misc/ParamsProvider.kt",
      "language": "kotlin",
      "line": 71,
      "offset": 6,
      "length": 18,
      "code": {
        "startLine": 69,
        "length": 18,
        "offset": 114,
        "surroundingCode": "  val SYSTEM_SCALING_RATIO\n    get() = window.devicePixelRatio  // get every time because it can be changed\n  val USER_SCALING_RATIO: Double\n\n  actual val CLIPPING_BORDERS: Boolean"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-common.jsMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": 7428645727019829027
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'HOST' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-common/src/jsMain/kotlin/org/jetbrains/projector/client/common/misc/ParamsProvider.kt",
      "language": "kotlin",
      "line": 74,
      "offset": 6,
      "length": 4,
      "code": {
        "startLine": 72,
        "length": 4,
        "offset": 46,
        "surroundingCode": "\n  actual val CLIPPING_BORDERS: Boolean\n  val HOST: String\n  val PORT: String\n  val PATH: String"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-common.jsMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": -4428076791880847519
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'PORT' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-common/src/jsMain/kotlin/org/jetbrains/projector/client/common/misc/ParamsProvider.kt",
      "language": "kotlin",
      "line": 75,
      "offset": 6,
      "length": 4,
      "code": {
        "startLine": 73,
        "length": 4,
        "offset": 64,
        "surroundingCode": "  actual val CLIPPING_BORDERS: Boolean\n  val HOST: String\n  val PORT: String\n  val PATH: String\n  val RELAY_SERVER_ID: String?"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-common.jsMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": -882256508376830122
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'PATH' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-common/src/jsMain/kotlin/org/jetbrains/projector/client/common/misc/ParamsProvider.kt",
      "language": "kotlin",
      "line": 76,
      "offset": 6,
      "length": 4,
      "code": {
        "startLine": 74,
        "length": 4,
        "offset": 44,
        "surroundingCode": "  val HOST: String\n  val PORT: String\n  val PATH: String\n  val RELAY_SERVER_ID: String?\n  val ENABLE_RELAY: Boolean get() = RELAY_SERVER_ID != null"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-common.jsMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": -6349062849173659539
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'RELAY_SERVER_ID' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-common/src/jsMain/kotlin/org/jetbrains/projector/client/common/misc/ParamsProvider.kt",
      "language": "kotlin",
      "line": 77,
      "offset": 6,
      "length": 15,
      "code": {
        "startLine": 75,
        "length": 15,
        "offset": 44,
        "surroundingCode": "  val PORT: String\n  val PATH: String\n  val RELAY_SERVER_ID: String?\n  val ENABLE_RELAY: Boolean get() = RELAY_SERVER_ID != null\n  actual val LOG_UNSUPPORTED_EVENTS: Boolean"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-common.jsMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": 6722428658229029187
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'ENABLE_RELAY' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-common/src/jsMain/kotlin/org/jetbrains/projector/client/common/misc/ParamsProvider.kt",
      "language": "kotlin",
      "line": 78,
      "offset": 6,
      "length": 12,
      "code": {
        "startLine": 76,
        "length": 12,
        "offset": 56,
        "surroundingCode": "  val PATH: String\n  val RELAY_SERVER_ID: String?\n  val ENABLE_RELAY: Boolean get() = RELAY_SERVER_ID != null\n  actual val LOG_UNSUPPORTED_EVENTS: Boolean\n  val DOUBLE_BUFFERING: Boolean"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-common.jsMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": 5566059091201230491
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'DOUBLE_BUFFERING' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-common/src/jsMain/kotlin/org/jetbrains/projector/client/common/misc/ParamsProvider.kt",
      "language": "kotlin",
      "line": 80,
      "offset": 6,
      "length": 16,
      "code": {
        "startLine": 78,
        "length": 16,
        "offset": 111,
        "surroundingCode": "  val ENABLE_RELAY: Boolean get() = RELAY_SERVER_ID != null\n  actual val LOG_UNSUPPORTED_EVENTS: Boolean\n  val DOUBLE_BUFFERING: Boolean\n  val ENABLE_COMPRESSION: Boolean\n  val TO_CLIENT_FORMAT: ToClientFormat"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-common.jsMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": -3046113938253558318
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'ENABLE_COMPRESSION' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-common/src/jsMain/kotlin/org/jetbrains/projector/client/common/misc/ParamsProvider.kt",
      "language": "kotlin",
      "line": 81,
      "offset": 6,
      "length": 18,
      "code": {
        "startLine": 79,
        "length": 18,
        "offset": 83,
        "surroundingCode": "  actual val LOG_UNSUPPORTED_EVENTS: Boolean\n  val DOUBLE_BUFFERING: Boolean\n  val ENABLE_COMPRESSION: Boolean\n  val TO_CLIENT_FORMAT: ToClientFormat\n  actual val IMAGE_TTL: Double"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-common.jsMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": -477425503046050747
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'TO_CLIENT_FORMAT' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-common/src/jsMain/kotlin/org/jetbrains/projector/client/common/misc/ParamsProvider.kt",
      "language": "kotlin",
      "line": 82,
      "offset": 6,
      "length": 16,
      "code": {
        "startLine": 80,
        "length": 16,
        "offset": 72,
        "surroundingCode": "  val DOUBLE_BUFFERING: Boolean\n  val ENABLE_COMPRESSION: Boolean\n  val TO_CLIENT_FORMAT: ToClientFormat\n  actual val IMAGE_TTL: Double\n  val FLUSH_DELAY: Int?"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-common.jsMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": -2833699161468683103
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'FLUSH_DELAY' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-common/src/jsMain/kotlin/org/jetbrains/projector/client/common/misc/ParamsProvider.kt",
      "language": "kotlin",
      "line": 84,
      "offset": 6,
      "length": 11,
      "code": {
        "startLine": 82,
        "length": 11,
        "offset": 76,
        "surroundingCode": "  val TO_CLIENT_FORMAT: ToClientFormat\n  actual val IMAGE_TTL: Double\n  val FLUSH_DELAY: Int?\n  actual val SHOW_TEXT_WIDTH: Boolean\n  val SHOW_SENT_RECEIVED: Boolean"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-common.jsMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": 2354774742970070543
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'SHOW_SENT_RECEIVED' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-common/src/jsMain/kotlin/org/jetbrains/projector/client/common/misc/ParamsProvider.kt",
      "language": "kotlin",
      "line": 86,
      "offset": 6,
      "length": 18,
      "code": {
        "startLine": 84,
        "length": 18,
        "offset": 68,
        "surroundingCode": "  val FLUSH_DELAY: Int?\n  actual val SHOW_TEXT_WIDTH: Boolean\n  val SHOW_SENT_RECEIVED: Boolean\n  val SHOW_PING: Boolean\n  val BACKGROUND_COLOR: String"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-common.jsMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": -2659493242220417644
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'SHOW_PING' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-common/src/jsMain/kotlin/org/jetbrains/projector/client/common/misc/ParamsProvider.kt",
      "language": "kotlin",
      "line": 87,
      "offset": 6,
      "length": 9,
      "code": {
        "startLine": 85,
        "length": 9,
        "offset": 78,
        "surroundingCode": "  actual val SHOW_TEXT_WIDTH: Boolean\n  val SHOW_SENT_RECEIVED: Boolean\n  val SHOW_PING: Boolean\n  val BACKGROUND_COLOR: String\n  val PING_AVERAGE_COUNT: Int?"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-common.jsMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": 5254744011353640043
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'BACKGROUND_COLOR' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-common/src/jsMain/kotlin/org/jetbrains/projector/client/common/misc/ParamsProvider.kt",
      "language": "kotlin",
      "line": 88,
      "offset": 6,
      "length": 16,
      "code": {
        "startLine": 86,
        "length": 16,
        "offset": 65,
        "surroundingCode": "  val SHOW_SENT_RECEIVED: Boolean\n  val SHOW_PING: Boolean\n  val BACKGROUND_COLOR: String\n  val PING_AVERAGE_COUNT: Int?\n  val PING_INTERVAL: Int"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-common.jsMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": 8483423538492408723
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'PING_AVERAGE_COUNT' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-common/src/jsMain/kotlin/org/jetbrains/projector/client/common/misc/ParamsProvider.kt",
      "language": "kotlin",
      "line": 89,
      "offset": 6,
      "length": 18,
      "code": {
        "startLine": 87,
        "length": 18,
        "offset": 62,
        "surroundingCode": "  val SHOW_PING: Boolean\n  val BACKGROUND_COLOR: String\n  val PING_AVERAGE_COUNT: Int?\n  val PING_INTERVAL: Int\n  val SHOW_PROCESSING_TIME: Boolean"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-common.jsMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": 4155164183882596901
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'PING_INTERVAL' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-common/src/jsMain/kotlin/org/jetbrains/projector/client/common/misc/ParamsProvider.kt",
      "language": "kotlin",
      "line": 90,
      "offset": 6,
      "length": 13,
      "code": {
        "startLine": 88,
        "length": 13,
        "offset": 68,
        "surroundingCode": "  val BACKGROUND_COLOR: String\n  val PING_AVERAGE_COUNT: Int?\n  val PING_INTERVAL: Int\n  val SHOW_PROCESSING_TIME: Boolean\n  actual val REPAINT_AREA: RepaintAreaSetting"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-common.jsMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": -8934500506012406622
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'SHOW_PROCESSING_TIME' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-common/src/jsMain/kotlin/org/jetbrains/projector/client/common/misc/ParamsProvider.kt",
      "language": "kotlin",
      "line": 91,
      "offset": 6,
      "length": 20,
      "code": {
        "startLine": 89,
        "length": 20,
        "offset": 62,
        "surroundingCode": "  val PING_AVERAGE_COUNT: Int?\n  val PING_INTERVAL: Int\n  val SHOW_PROCESSING_TIME: Boolean\n  actual val REPAINT_AREA: RepaintAreaSetting\n  val SPECULATIVE_TYPING: Boolean"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-common.jsMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": -1478530687853865560
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'SPECULATIVE_TYPING' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-common/src/jsMain/kotlin/org/jetbrains/projector/client/common/misc/ParamsProvider.kt",
      "language": "kotlin",
      "line": 93,
      "offset": 6,
      "length": 18,
      "code": {
        "startLine": 91,
        "length": 18,
        "offset": 88,
        "surroundingCode": "  val SHOW_PROCESSING_TIME: Boolean\n  actual val REPAINT_AREA: RepaintAreaSetting\n  val SPECULATIVE_TYPING: Boolean\n  val ENABLE_WSS: Boolean\n  val HANDSHAKE_TOKEN: String?"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-common.jsMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": 1695622200602598883
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'ENABLE_WSS' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-common/src/jsMain/kotlin/org/jetbrains/projector/client/common/misc/ParamsProvider.kt",
      "language": "kotlin",
      "line": 94,
      "offset": 6,
      "length": 10,
      "code": {
        "startLine": 92,
        "length": 10,
        "offset": 86,
        "surroundingCode": "  actual val REPAINT_AREA: RepaintAreaSetting\n  val SPECULATIVE_TYPING: Boolean\n  val ENABLE_WSS: Boolean\n  val HANDSHAKE_TOKEN: String?\n  val INPUT_METHOD_TYPE: InputMethodType"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-common.jsMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": 3531130835607149396
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'HANDSHAKE_TOKEN' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-common/src/jsMain/kotlin/org/jetbrains/projector/client/common/misc/ParamsProvider.kt",
      "language": "kotlin",
      "line": 95,
      "offset": 6,
      "length": 15,
      "code": {
        "startLine": 93,
        "length": 15,
        "offset": 66,
        "surroundingCode": "  val SPECULATIVE_TYPING: Boolean\n  val ENABLE_WSS: Boolean\n  val HANDSHAKE_TOKEN: String?\n  val INPUT_METHOD_TYPE: InputMethodType\n  val IDE_WINDOW_ID: Int?"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-common.jsMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": 4265025159406346327
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'INPUT_METHOD_TYPE' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-common/src/jsMain/kotlin/org/jetbrains/projector/client/common/misc/ParamsProvider.kt",
      "language": "kotlin",
      "line": 96,
      "offset": 6,
      "length": 17,
      "code": {
        "startLine": 94,
        "length": 17,
        "offset": 63,
        "surroundingCode": "  val ENABLE_WSS: Boolean\n  val HANDSHAKE_TOKEN: String?\n  val INPUT_METHOD_TYPE: InputMethodType\n  val IDE_WINDOW_ID: Int?\n  val SHOW_NOT_SECURE_WARNING: Boolean"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-common.jsMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": -1494752775290922544
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'IDE_WINDOW_ID' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-common/src/jsMain/kotlin/org/jetbrains/projector/client/common/misc/ParamsProvider.kt",
      "language": "kotlin",
      "line": 97,
      "offset": 6,
      "length": 13,
      "code": {
        "startLine": 95,
        "length": 13,
        "offset": 78,
        "surroundingCode": "  val HANDSHAKE_TOKEN: String?\n  val INPUT_METHOD_TYPE: InputMethodType\n  val IDE_WINDOW_ID: Int?\n  val SHOW_NOT_SECURE_WARNING: Boolean\n  val REPAINT_INTERVAL_MS: Int"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-common.jsMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": 7271322137724134220
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'SHOW_NOT_SECURE_WARNING' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-common/src/jsMain/kotlin/org/jetbrains/projector/client/common/misc/ParamsProvider.kt",
      "language": "kotlin",
      "line": 98,
      "offset": 6,
      "length": 23,
      "code": {
        "startLine": 96,
        "length": 23,
        "offset": 73,
        "surroundingCode": "  val INPUT_METHOD_TYPE: InputMethodType\n  val IDE_WINDOW_ID: Int?\n  val SHOW_NOT_SECURE_WARNING: Boolean\n  val REPAINT_INTERVAL_MS: Int\n  actual val IMAGE_CACHE_SIZE_CHARS: Int"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-common.jsMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": -1356760366004106197
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'REPAINT_INTERVAL_MS' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-common/src/jsMain/kotlin/org/jetbrains/projector/client/common/misc/ParamsProvider.kt",
      "language": "kotlin",
      "line": 99,
      "offset": 6,
      "length": 19,
      "code": {
        "startLine": 97,
        "length": 19,
        "offset": 71,
        "surroundingCode": "  val IDE_WINDOW_ID: Int?\n  val SHOW_NOT_SECURE_WARNING: Boolean\n  val REPAINT_INTERVAL_MS: Int\n  actual val IMAGE_CACHE_SIZE_CHARS: Int\n  val BLOCK_CLOSING: Boolean"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-common.jsMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": -95287423977713114
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'BLOCK_CLOSING' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-common/src/jsMain/kotlin/org/jetbrains/projector/client/common/misc/ParamsProvider.kt",
      "language": "kotlin",
      "line": 101,
      "offset": 6,
      "length": 13,
      "code": {
        "startLine": 99,
        "length": 13,
        "offset": 78,
        "surroundingCode": "  val REPAINT_INTERVAL_MS: Int\n  actual val IMAGE_CACHE_SIZE_CHARS: Int\n  val BLOCK_CLOSING: Boolean\n  val LAYOUT_TYPE: LayoutType\n  val SCALING_RATIO: Double"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-common.jsMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": 7996833431182366051
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'LAYOUT_TYPE' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-common/src/jsMain/kotlin/org/jetbrains/projector/client/common/misc/ParamsProvider.kt",
      "language": "kotlin",
      "line": 102,
      "offset": 6,
      "length": 11,
      "code": {
        "startLine": 100,
        "length": 11,
        "offset": 76,
        "surroundingCode": "  actual val IMAGE_CACHE_SIZE_CHARS: Int\n  val BLOCK_CLOSING: Boolean\n  val LAYOUT_TYPE: LayoutType\n  val SCALING_RATIO: Double\n    get() = SYSTEM_SCALING_RATIO * USER_SCALING_RATIO"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-common.jsMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": -6678764214214056584
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'arcTo' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-common/src/jsMain/kotlin/org/jetbrains/projector/client/common/canvas/DomContext2d.kt",
      "language": "kotlin",
      "line": 162,
      "offset": 6,
      "length": 5,
      "code": {
        "startLine": 160,
        "length": 5,
        "offset": 11,
        "surroundingCode": "  }\n\n  fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radius: Double) {\n    myContext2d.arcTo(x1, y1, x2, y2, radius)\n  }"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-common.jsMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": -242783071765065157
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Property 'graphics' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-common/src/jvmMain/kotlin/org/jetbrains/projector/client/common/canvas/SwingContext2d.kt",
      "language": "kotlin",
      "line": 41,
      "offset": 6,
      "length": 8,
      "code": {
        "startLine": 39,
        "length": 8,
        "offset": 81,
        "surroundingCode": "  private var savedGraphics: Graphics2D = graphics.create() as Graphics2D\n\n  var graphics: Graphics2D = graphics.create() as Graphics2D\n    private set\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-common.jvmMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": 1950643748186443724
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'toCanvasLineCap' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-common/src/commonMain/kotlin/org/jetbrains/projector/client/common/canvas/Extensions.kt",
      "language": "kotlin",
      "line": 87,
      "offset": 31,
      "length": 15,
      "code": {
        "startLine": 85,
        "length": 15,
        "offset": 36,
        "surroundingCode": "  }\n\n  fun StrokeData.Basic.CapType.toCanvasLineCap(): Context2d.LineCap {\n    return when (this) {\n      StrokeData.Basic.CapType.ROUND -> Context2d.LineCap.ROUND"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-common.commonMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": 7699840637864536652
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Class member can have 'private' visibility",
  "severity": "Info",
  "comment": "Function 'toCanvasLineJoin' could be private",
  "detailsInfo": "<html>\n<body>\nThis inspection reports class members which can be made private.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-common/src/commonMain/kotlin/org/jetbrains/projector/client/common/canvas/Extensions.kt",
      "language": "kotlin",
      "line": 95,
      "offset": 32,
      "length": 16,
      "code": {
        "startLine": 93,
        "length": 16,
        "offset": 37,
        "surroundingCode": "  }\n\n  fun StrokeData.Basic.JoinType.toCanvasLineJoin(): Context2d.LineJoin {\n    return when (this) {\n      StrokeData.Basic.JoinType.ROUND -> Context2d.LineJoin.ROUND"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-common.commonMain",
    "inspectionName": "MemberVisibilityCanBePrivate"
  },
  "hash": -8872848125051595428
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant nullable return type",
  "severity": "High",
  "comment": "'toToClientCompressor' always returns non-null type",
  "detailsInfo": "<html>\n<body>\nThis inspections reports functions/variables with nullable return type always returns non-null.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/protocol/HandshakeTypesSelector.kt",
      "language": "kotlin",
      "line": 40,
      "offset": 91,
      "length": 1,
      "code": {
        "startLine": 38,
        "length": 1,
        "offset": 232,
        "surroundingCode": "\n  public fun selectToClientCompressor(supportedToClientCompressions: List<CompressionType>): MessageCompressor<ToClientTransferableType>? {\n    fun CompressionType.toToClientCompressor(): MessageCompressor<ToClientTransferableType>? = when (this) {\n      CompressionType.GZIP -> GZipMessageCompressor\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantNullableReturnType"
  },
  "hash": 7136176957770892529
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant nullable return type",
  "severity": "High",
  "comment": "'toToClientEncoder' always returns non-null type",
  "detailsInfo": "<html>\n<body>\nThis inspections reports functions/variables with nullable return type always returns non-null.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/protocol/HandshakeTypesSelector.kt",
      "language": "kotlin",
      "line": 50,
      "offset": 64,
      "length": 1,
      "code": {
        "startLine": 48,
        "length": 1,
        "offset": 175,
        "surroundingCode": "\n  public fun selectToClientEncoder(supportedToClientProtocols: List<ProtocolType>): ToClientMessageEncoder? {\n    fun ProtocolType.toToClientEncoder(): ToClientMessageEncoder? = when (this) {\n      ProtocolType.KOTLINX_JSON -> KotlinxJsonToClientMessageEncoder\n      ProtocolType.KOTLINX_PROTOBUF -> KotlinxProtoBufToClientMessageEncoder"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantNullableReturnType"
  },
  "hash": -5998999535467293994
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant nullable return type",
  "severity": "High",
  "comment": "'toToServerDecoder' always returns non-null type",
  "detailsInfo": "<html>\n<body>\nThis inspections reports functions/variables with nullable return type always returns non-null.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/protocol/HandshakeTypesSelector.kt",
      "language": "kotlin",
      "line": 69,
      "offset": 64,
      "length": 1,
      "code": {
        "startLine": 67,
        "length": 1,
        "offset": 175,
        "surroundingCode": "\n  public fun selectToServerDecoder(supportedToServerProtocols: List<ProtocolType>): ToServerMessageDecoder? {\n    fun ProtocolType.toToServerDecoder(): ToServerMessageDecoder? = when (this) {\n      ProtocolType.KOTLINX_JSON -> KotlinxJsonToServerMessageDecoder\n      ProtocolType.KOTLINX_PROTOBUF -> KotlinxJsonToServerMessageDecoder"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantNullableReturnType"
  },
  "hash": -4370938616433178547
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant 'Unit'",
  "severity": "High",
  "comment": "Redundant 'Unit'",
  "detailsInfo": "<html>\n<body>\nThis inspection reports a redundant <b>Unit</b> type specification which can be omitted.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toClient/Transform.kt",
      "language": "kotlin",
      "line": 94,
      "offset": 12,
      "length": 4,
      "code": {
        "startLine": 92,
        "length": 4,
        "offset": 153,
        "surroundingCode": "        is ServerWindowStateEvent -> Do exhaustive when (event) {\n          is ServerSetCompositeEvent -> if (event == lastCompositeEvent) {\n            Unit\n          }\n          else {\n            lastCompositeEvent = event"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantUnitExpression"
  },
  "hash": 3757863893707344692
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant 'Unit'",
  "severity": "High",
  "comment": "Redundant 'Unit'",
  "detailsInfo": "<html>\n<body>\nThis inspection reports a redundant <b>Unit</b> type specification which can be omitted.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toClient/Transform.kt",
      "language": "kotlin",
      "line": 102,
      "offset": 12,
      "length": 4,
      "code": {
        "startLine": 100,
        "length": 4,
        "offset": 78,
        "surroundingCode": "\n          is ServerSetClipEvent -> if (event == lastClipEvent) {\n            Unit\n          }\n          else {\n            lastClipEvent = event"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantUnitExpression"
  },
  "hash": -3468620172500399039
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant 'Unit'",
  "severity": "High",
  "comment": "Redundant 'Unit'",
  "detailsInfo": "<html>\n<body>\nThis inspection reports a redundant <b>Unit</b> type specification which can be omitted.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toClient/Transform.kt",
      "language": "kotlin",
      "line": 110,
      "offset": 12,
      "length": 4,
      "code": {
        "startLine": 108,
        "length": 4,
        "offset": 88,
        "surroundingCode": "\n          is ServerSetTransformEvent -> if (event == lastTransformEvent) {\n            Unit\n          }\n          else {\n            lastTransformEvent = event"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantUnitExpression"
  },
  "hash": 1613986299371206846
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant 'Unit'",
  "severity": "High",
  "comment": "Redundant 'Unit'",
  "detailsInfo": "<html>\n<body>\nThis inspection reports a redundant <b>Unit</b> type specification which can be omitted.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toClient/Transform.kt",
      "language": "kotlin",
      "line": 118,
      "offset": 12,
      "length": 4,
      "code": {
        "startLine": 116,
        "length": 4,
        "offset": 83,
        "surroundingCode": "\n          is ServerSetPaintEvent -> if (event == lastSetPaintEvent) {\n            Unit\n          }\n          else {\n            lastSetPaintEvent = event"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantUnitExpression"
  },
  "hash": 4866225203201172743
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant 'Unit'",
  "severity": "High",
  "comment": "Redundant 'Unit'",
  "detailsInfo": "<html>\n<body>\nThis inspection reports a redundant <b>Unit</b> type specification which can be omitted.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toClient/Transform.kt",
      "language": "kotlin",
      "line": 126,
      "offset": 12,
      "length": 4,
      "code": {
        "startLine": 124,
        "length": 4,
        "offset": 78,
        "surroundingCode": "\n          is ServerSetFontEvent -> if (event == lastFontEvent) {\n            Unit\n          }\n          else {\n            lastFontEvent = event"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantUnitExpression"
  },
  "hash": -2101396092506579362
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant 'Unit'",
  "severity": "High",
  "comment": "Redundant 'Unit'",
  "detailsInfo": "<html>\n<body>\nThis inspection reports a redundant <b>Unit</b> type specification which can be omitted.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toClient/Transform.kt",
      "language": "kotlin",
      "line": 134,
      "offset": 12,
      "length": 4,
      "code": {
        "startLine": 132,
        "length": 4,
        "offset": 82,
        "surroundingCode": "\n          is ServerSetStrokeEvent -> if (event == lastStrokeEvent) {\n            Unit\n          }\n          else {\n            lastStrokeEvent = event"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantUnitExpression"
  },
  "hash": 6714329928015747790
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant 'Unit'",
  "severity": "High",
  "comment": "Redundant 'Unit'",
  "detailsInfo": "<html>\n<body>\nThis inspection reports a redundant <b>Unit</b> type specification which can be omitted.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toClient/Transform.kt",
      "language": "kotlin",
      "line": 155,
      "offset": 12,
      "length": 4,
      "code": {
        "startLine": 153,
        "length": 4,
        "offset": 41,
        "surroundingCode": "          }\n          else {\n            Unit\n          }\n        }\n      }"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantUnitExpression"
  },
  "hash": -9190185267860936781
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-util-agent/src/main/kotlin/org/jetbrains/projector/util/agent/Misc.kt",
      "language": "kotlin",
      "line": 34,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 32,
        "length": 6,
        "offset": 50,
        "surroundingCode": "private val logger = Logger(\"util.agent.MiscKt\")\n\npublic fun attachAgent(agentJarPath: String, args: String?) {\n  logger.debug { \"dynamically attaching agent: jar=$agentJarPath, args=$args\" }\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-util-agent.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 8611330294588889922
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-util-agent/src/main/kotlin/org/jetbrains/projector/util/agent/Misc.kt",
      "language": "kotlin",
      "line": 52,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 50,
        "length": 6,
        "offset": 3,
        "surroundingCode": "}\n\npublic fun copyAgentToTempJarAndAttach(agentJar: InputStream, args: String?) {\n  val tempJar = File.createTempFile(\"projector-agent\", \".jar\").apply {\n    deleteOnExit()"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-util-agent.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 4209445166890714266
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/md/PanelUpdater.kt",
      "language": "kotlin",
      "line": 40,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 38,
        "length": 6,
        "offset": 49,
        "surroundingCode": "  private val logger = Logger<PanelUpdater>()\n\n  public var showCallback: ((id: Int, shown: Boolean) -> Unit)? = null\n  public var resizeCallback: ((id: Int, size: Dimension) -> Unit)? = null\n  public var moveCallback: ((id: Int, pos: Point) -> Unit)? = null"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -6102606516590151096
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/md/PanelUpdater.kt",
      "language": "kotlin",
      "line": 41,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 39,
        "length": 6,
        "offset": 74,
        "surroundingCode": "\n  public var showCallback: ((id: Int, shown: Boolean) -> Unit)? = null\n  public var resizeCallback: ((id: Int, size: Dimension) -> Unit)? = null\n  public var moveCallback: ((id: Int, pos: Point) -> Unit)? = null\n  public var disposeCallback: ((id: Int) -> Unit)? = null"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 2201108038880938657
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/md/PanelUpdater.kt",
      "language": "kotlin",
      "line": 42,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 40,
        "length": 6,
        "offset": 147,
        "surroundingCode": "  public var showCallback: ((id: Int, shown: Boolean) -> Unit)? = null\n  public var resizeCallback: ((id: Int, size: Dimension) -> Unit)? = null\n  public var moveCallback: ((id: Int, pos: Point) -> Unit)? = null\n  public var disposeCallback: ((id: Int) -> Unit)? = null\n  public var placeToWindowCallback: ((id: Int, rootComponent: Component?) -> Unit)? = null"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -8467737628304894674
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/md/PanelUpdater.kt",
      "language": "kotlin",
      "line": 43,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 41,
        "length": 6,
        "offset": 143,
        "surroundingCode": "  public var resizeCallback: ((id: Int, size: Dimension) -> Unit)? = null\n  public var moveCallback: ((id: Int, pos: Point) -> Unit)? = null\n  public var disposeCallback: ((id: Int) -> Unit)? = null\n  public var placeToWindowCallback: ((id: Int, rootComponent: Component?) -> Unit)? = null\n  public var setHtmlCallback: ((id: Int, lastChangedHtml: String) -> Unit)? = null"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 9183907240740453832
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/md/PanelUpdater.kt",
      "language": "kotlin",
      "line": 44,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 42,
        "length": 6,
        "offset": 127,
        "surroundingCode": "  public var moveCallback: ((id: Int, pos: Point) -> Unit)? = null\n  public var disposeCallback: ((id: Int) -> Unit)? = null\n  public var placeToWindowCallback: ((id: Int, rootComponent: Component?) -> Unit)? = null\n  public var setHtmlCallback: ((id: Int, lastChangedHtml: String) -> Unit)? = null\n  public var setCssCallback: ((id: Int, lastCssString: String) -> Unit)? = null"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -2125108173753200693
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/md/PanelUpdater.kt",
      "language": "kotlin",
      "line": 45,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 43,
        "length": 6,
        "offset": 151,
        "surroundingCode": "  public var disposeCallback: ((id: Int) -> Unit)? = null\n  public var placeToWindowCallback: ((id: Int, rootComponent: Component?) -> Unit)? = null\n  public var setHtmlCallback: ((id: Int, lastChangedHtml: String) -> Unit)? = null\n  public var setCssCallback: ((id: Int, lastCssString: String) -> Unit)? = null\n  public var scrollCallback: ((id: Int, lastScrollOffset: Int) -> Unit)? = null"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -3391598194652581749
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/md/PanelUpdater.kt",
      "language": "kotlin",
      "line": 46,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 44,
        "length": 6,
        "offset": 176,
        "surroundingCode": "  public var placeToWindowCallback: ((id: Int, rootComponent: Component?) -> Unit)? = null\n  public var setHtmlCallback: ((id: Int, lastChangedHtml: String) -> Unit)? = null\n  public var setCssCallback: ((id: Int, lastCssString: String) -> Unit)? = null\n  public var scrollCallback: ((id: Int, lastScrollOffset: Int) -> Unit)? = null\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -712842938737603910
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/md/PanelUpdater.kt",
      "language": "kotlin",
      "line": 47,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 45,
        "length": 6,
        "offset": 165,
        "surroundingCode": "  public var setHtmlCallback: ((id: Int, lastChangedHtml: String) -> Unit)? = null\n  public var setCssCallback: ((id: Int, lastCssString: String) -> Unit)? = null\n  public var scrollCallback: ((id: Int, lastScrollOffset: Int) -> Unit)? = null\n\n  public fun openInExternalBrowser(link: String) {"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 1410721526687680518
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/md/PanelUpdater.kt",
      "language": "kotlin",
      "line": 49,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 47,
        "length": 6,
        "offset": 83,
        "surroundingCode": "  public var scrollCallback: ((id: Int, lastScrollOffset: Int) -> Unit)? = null\n\n  public fun openInExternalBrowser(link: String) {\n    Desktop.getDesktop().browse(URI(link))\n  }"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 7052402943175020586
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/md/PanelUpdater.kt",
      "language": "kotlin",
      "line": 63,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 61,
        "length": 6,
        "offset": 7,
        "surroundingCode": "  }\n\n  public fun updateAll() {\n    idToPanelLock.read {\n      idToPanel.keys.forEach {"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -477846949711512310
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/md/PanelUpdater.kt",
      "language": "kotlin",
      "line": 36,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 34,
        "length": 6,
        "offset": 32,
        "surroundingCode": "import kotlin.concurrent.write\n\npublic object PanelUpdater {\n\n  private val logger = Logger<PanelUpdater>()"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -6247756964041017259
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/md/MarkdownPanelMaker.kt",
      "language": "kotlin",
      "line": 173,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 171,
        "length": 6,
        "offset": 16,
        "surroundingCode": "\n  @JvmStatic\n  public fun createMarkdownHtmlPanel(mdClassLoader: ClassLoader): Any {\n    if (!::classPool.isInitialized) {\n      classPool = ClassPool().apply {"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -606193608562898908
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/md/MarkdownPanelMaker.kt",
      "language": "kotlin",
      "line": 28,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 26,
        "length": 6,
        "offset": 20,
        "surroundingCode": "import javassist.*\n\npublic object MarkdownPanelMaker {\n\n  // todo: this static initialization won't support reloaded MD plugin because classloader there will change"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -5125135740076401159
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/log/DelegatingJvmLogger.kt",
      "language": "kotlin",
      "line": 35,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 33,
        "length": 6,
        "offset": 69,
        "surroundingCode": "\n// todo: make it internal after moving ProjectorServer to this repo\npublic class DelegatingJvmLogger(tag: String) : Logger {\n\n  private var ideaLoggerState: IdeaLoggerState = IdeaLoggerState.WaitingIdeaLoggerState()"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 8375689112456928117
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/IdeColors.kt",
      "language": "kotlin",
      "line": 42,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 40,
        "length": 6,
        "offset": 46,
        "surroundingCode": "  private val logger = Logger<IdeColors>()\n\n  public var colors: ServerWindowColorsEvent.ColorsStorage? = null\n    private set\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 2513913316219681180
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/IdeColors.kt",
      "language": "kotlin",
      "line": 38,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 36,
        "length": 6,
        "offset": 75,
        "surroundingCode": " * Calls provided in constructor onColorsChanged action on LAF change.\n */\npublic class IdeColors(private val onColorsChanged: (ServerWindowColorsEvent.ColorsStorage) -> Unit) {\n\n  private val logger = Logger<IdeColors>()"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -1117250767524876006
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/IdeaState.kt",
      "language": "kotlin",
      "line": 43,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 41,
        "length": 6,
        "offset": 41,
        "surroundingCode": "private val logger = Logger(\"IdeState\")\n\npublic fun invokeWhenIdeaIsInitialized(\n  purpose: String,\n  onNoIdeaFound: (() -> Unit)? = null,"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 7178727376312393552
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/KeymapSetter.kt",
      "language": "kotlin",
      "line": 40,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 38,
        "length": 6,
        "offset": 7,
        "surroundingCode": "  }\n\n  public fun setKeymap(keymap: UserKeymap) {\n    invokeWhenIdeaIsInitialized(\"set keymap to match user's OS ($keymap)\") { ideaClassLoader ->\n      SwingUtilities.invokeLater {"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -4136744503732354911
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/KeymapSetter.kt",
      "language": "kotlin",
      "line": 30,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 28,
        "length": 6,
        "offset": 35,
        "surroundingCode": "import javax.swing.SwingUtilities\n\npublic object KeymapSetter {\n\n  private val logger = Logger<KeymapSetter>()"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -8191815963220284729
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/SettingsInitializer.kt",
      "language": "kotlin",
      "line": 91,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 89,
        "length": 6,
        "offset": 7,
        "surroundingCode": "  }\n\n  public fun addTaskToInitializeIdea(defaultAa: Any?) {\n    invokeWhenIdeaIsInitialized(\"initialize IDEA: fix AA and disable smooth scrolling (at start)\") {\n      onIdeaInitialization(it, defaultAa)"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -2790718616818998003
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/SettingsInitializer.kt",
      "language": "kotlin",
      "line": 31,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 29,
        "length": 6,
        "offset": 30,
        "surroundingCode": "import javax.swing.UIManager\n\npublic object SettingsInitializer {\n\n  private fun getIdeaComponentAntiAliasing(ideaClassLoader: ClassLoader): Any? {"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -2812711614238577580
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/IjInjectorAgentInitializer.kt",
      "language": "kotlin",
      "line": 37,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 35,
        "length": 6,
        "offset": 16,
        "surroundingCode": "\n  @JvmStatic\n  public fun getIdeClassloader(): ClassLoader? {\n    return ijClassLoader.get()\n  }"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -2969901527274376359
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/IjInjectorAgentInitializer.kt",
      "language": "kotlin",
      "line": 42,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 40,
        "length": 6,
        "offset": 42,
        "surroundingCode": "\n  @OptIn(ExperimentalStdlibApi::class)\n  public fun init(isAgent: Boolean) {\n    invokeWhenIdeaIsInitialized(\"attach IJ injector agent\") { ideClassLoader ->\n      this.ijClassLoader = WeakReference(ideClassLoader)"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -8909388937892896326
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/IjInjectorAgentInitializer.kt",
      "language": "kotlin",
      "line": 32,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 30,
        "length": 6,
        "offset": 36,
        "surroundingCode": "import java.lang.ref.WeakReference\n\npublic object IjInjectorAgentInitializer {\n\n  private lateinit var ijClassLoader: WeakReference<ClassLoader>"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 2494633928201294799
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/util/Awt.kt",
      "language": "kotlin",
      "line": 29,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 27,
        "length": 6,
        "offset": 38,
        "surroundingCode": "import java.awt.KeyboardFocusManager\n\npublic fun focusOwnerOrTarget(target: Component): Component {\n  val manager = KeyboardFocusManager.getCurrentKeyboardFocusManager()\n  return manager.focusOwner ?: target"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -8097188302914301371
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/util/Ssl.kt",
      "language": "kotlin",
      "line": 38,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 36,
        "length": 6,
        "offset": 38,
        "surroundingCode": "private val logger = Logger(\"KeyKt\")\n\npublic const val SSL_ENV_NAME: String = \"ORG_JETBRAINS_PROJECTOR_SERVER_SSL_PROPERTIES_PATH\"\npublic const val SSL_STORE_TYPE: String = \"STORE_TYPE\"\npublic const val SSL_FILE_PATH: String = \"FILE_PATH\""
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -5942530920357625213
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/util/Ssl.kt",
      "language": "kotlin",
      "line": 39,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 37,
        "length": 6,
        "offset": 94,
        "surroundingCode": "\npublic const val SSL_ENV_NAME: String = \"ORG_JETBRAINS_PROJECTOR_SERVER_SSL_PROPERTIES_PATH\"\npublic const val SSL_STORE_TYPE: String = \"STORE_TYPE\"\npublic const val SSL_FILE_PATH: String = \"FILE_PATH\"\npublic const val SSL_STORE_PASSWORD: String = \"STORE_PASSWORD\""
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -9123045617341758395
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/util/Ssl.kt",
      "language": "kotlin",
      "line": 40,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 38,
        "length": 6,
        "offset": 148,
        "surroundingCode": "public const val SSL_ENV_NAME: String = \"ORG_JETBRAINS_PROJECTOR_SERVER_SSL_PROPERTIES_PATH\"\npublic const val SSL_STORE_TYPE: String = \"STORE_TYPE\"\npublic const val SSL_FILE_PATH: String = \"FILE_PATH\"\npublic const val SSL_STORE_PASSWORD: String = \"STORE_PASSWORD\"\npublic const val SSL_KEY_PASSWORD: String = \"KEY_PASSWORD\""
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 4805272252372594949
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/util/Ssl.kt",
      "language": "kotlin",
      "line": 41,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 39,
        "length": 6,
        "offset": 108,
        "surroundingCode": "public const val SSL_STORE_TYPE: String = \"STORE_TYPE\"\npublic const val SSL_FILE_PATH: String = \"FILE_PATH\"\npublic const val SSL_STORE_PASSWORD: String = \"STORE_PASSWORD\"\npublic const val SSL_KEY_PASSWORD: String = \"KEY_PASSWORD\"\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 4845685706300902153
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/util/Ssl.kt",
      "language": "kotlin",
      "line": 42,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 40,
        "length": 6,
        "offset": 116,
        "surroundingCode": "public const val SSL_FILE_PATH: String = \"FILE_PATH\"\npublic const val SSL_STORE_PASSWORD: String = \"STORE_PASSWORD\"\npublic const val SSL_KEY_PASSWORD: String = \"KEY_PASSWORD\"\n\npublic fun setSsl(setWebSocketFactory: (WebSocketServerFactory) -> Unit): String? {"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 7100192756025941090
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/util/Ssl.kt",
      "language": "kotlin",
      "line": 44,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 42,
        "length": 6,
        "offset": 60,
        "surroundingCode": "public const val SSL_KEY_PASSWORD: String = \"KEY_PASSWORD\"\n\npublic fun setSsl(setWebSocketFactory: (WebSocketServerFactory) -> Unit): String? {\n  val sslPropertiesFilePath = getProperty(SSL_ENV_NAME) ?: return null\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -8592435247810809662
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/util/Reflect.kt",
      "language": "kotlin",
      "line": 30,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 28,
        "length": 6,
        "offset": 35,
        "surroundingCode": "import java.lang.reflect.Modifier\n\npublic fun Field.unprotect() {\n  isAccessible = true\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -7629650990189589160
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/util/Reflect.kt",
      "language": "kotlin",
      "line": 39,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 37,
        "length": 6,
        "offset": 3,
        "surroundingCode": "}\n\npublic fun Method.unprotect() {\n  isAccessible = true\n}"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -8141771452947308010
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/util/HostName.kt",
      "language": "kotlin",
      "line": 30,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 28,
        "length": 6,
        "offset": 38,
        "surroundingCode": "import java.net.UnknownHostException\n\npublic fun getHostName(address: InetAddress): String? {\n  return try {\n    // The trailing '.' makes the name into a \"Fully Qualified Domain Name\", i.e. an absolute domain name."
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -8684604158159620704
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/util/Property.kt",
      "language": "kotlin",
      "line": 26,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 24,
        "length": 6,
        "offset": 50,
        "surroundingCode": "package org.jetbrains.projector.server.core.util\n\npublic fun getProperty(propName: String): String? {\n  return System.getProperty(propName) ?: System.getenv(propName)\n}"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -537811491842437991
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/util/SizeAware.kt",
      "language": "kotlin",
      "line": 31,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 29,
        "length": 6,
        "offset": 42,
        "surroundingCode": "\n// todo: Add test with mocking of logger\npublic class SizeAware<T : Collection<*>>(\n  initialValue: T,\n  private val bigCollectionSize: Int?,"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 2684840646028660864
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/util/HostAddress.kt",
      "language": "kotlin",
      "line": 29,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 27,
        "length": 6,
        "offset": 35,
        "surroundingCode": "import java.net.InetSocketAddress\n\npublic fun getWildcardHostAddress(): InetAddress = InetSocketAddress(0).getAddress()"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -6053187881592544157
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/util/LaterInvokator.kt",
      "language": "kotlin",
      "line": 34,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 32,
        "length": 6,
        "offset": 37,
        "surroundingCode": "public interface LaterInvokator {\n\n  public operator fun invoke(awtEvent: AWTEvent)\n\n  public companion object {"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -3954011410659679220
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/util/LaterInvokator.kt",
      "language": "kotlin",
      "line": 38,
      "offset": 4,
      "length": 6,
      "code": {
        "startLine": 36,
        "length": 6,
        "offset": 33,
        "surroundingCode": "  public companion object {\n\n    public val defaultLaterInvokator: LaterInvokator = object : LaterInvokator {\n\n      private val dispatchEventMethod = EventQueue::class.java.getDeclaredMethod(\"dispatchEvent\", AWTEvent::class.java).apply {"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 8958371223761425542
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/util/LaterInvokator.kt",
      "language": "kotlin",
      "line": 36,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 34,
        "length": 6,
        "offset": 52,
        "surroundingCode": "  public operator fun invoke(awtEvent: AWTEvent)\n\n  public companion object {\n\n    public val defaultLaterInvokator: LaterInvokator = object : LaterInvokator {"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -1195995097993011854
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/util/LaterInvokator.kt",
      "language": "kotlin",
      "line": 32,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 30,
        "length": 6,
        "offset": 28,
        "surroundingCode": "import java.awt.EventQueue\n\npublic interface LaterInvokator {\n\n  public operator fun invoke(awtEvent: AWTEvent)"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -4045506186700101229
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/util/ObjectIdCacher.kt",
      "language": "kotlin",
      "line": 33,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 31,
        "length": 6,
        "offset": 65,
        "surroundingCode": "  private val objectToId = mutableMapOf<ObjectType, IdType>()\n\n  public fun getIdBy(obj: ObjectType): IdType {\n    val id = objectToId[obj]\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -3460561954812774782
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/util/ObjectIdCacher.kt",
      "language": "kotlin",
      "line": 49,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 47,
        "length": 6,
        "offset": 7,
        "surroundingCode": "  }\n\n  public fun getObjectBy(id: IdType): ObjectType = requireNotNull(idToObject[id]) { \"No id $id found. Available ids: $idToObject\" }\n}"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -762577473606528935
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/util/ObjectIdCacher.kt",
      "language": "kotlin",
      "line": 26,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 24,
        "length": 6,
        "offset": 50,
        "surroundingCode": "package org.jetbrains.projector.server.core.util\n\npublic class ObjectIdCacher<IdType : Number, ObjectType : Any>(initialId: IdType, private val incrementer: (IdType) -> IdType) {\n\n  private var nextId = initialId"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 1717356809384947251
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toAwt/Key.kt",
      "language": "kotlin",
      "line": 34,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 32,
        "length": 6,
        "offset": 32,
        "surroundingCode": "import java.awt.event.KeyEvent\n\npublic fun ClientRawKeyEvent.toAwtKeyEvent(connectionMillis: Long, target: Component): KeyEvent {\n  return KeyEvent(\n    target,"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 164182219565456237
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toAwt/Key.kt",
      "language": "kotlin",
      "line": 53,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 51,
        "length": 6,
        "offset": 3,
        "surroundingCode": "}\n\npublic fun ClientKeyPressEvent.toAwtKeyEvent(connectionMillis: Long, target: Component): KeyEvent {\n  val char = createAwtChar(this.char, this.modifiers)\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 4973606412756867625
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toAwt/Key.kt",
      "language": "kotlin",
      "line": 67,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 65,
        "length": 6,
        "offset": 3,
        "surroundingCode": "}\n\npublic fun ClientKeyEvent.toAwtKeyEvent(connectionMillis: Long, target: Component): KeyEvent {\n  val char = createAwtChar(this.char, this.modifiers)\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 2145885922317806027
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toAwt/Mouse.kt",
      "language": "kotlin",
      "line": 45,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 43,
        "length": 6,
        "offset": 48,
        "surroundingCode": "private const val DEFAULT_PIXEL_PER_UNIT = 100\n\npublic const val PIXEL_PER_UNIT_ENV_NAME: String = \"ORG_JETBRAINS_PROJECTOR_SERVER_PIXEL_PER_UNIT\"\nprivate val PIXEL_PER_UNIT = getProperty(PIXEL_PER_UNIT_ENV_NAME)?.toInt() ?: DEFAULT_PIXEL_PER_UNIT\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 632312779552962078
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toAwt/Mouse.kt",
      "language": "kotlin",
      "line": 52,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 50,
        "length": 6,
        "offset": 57,
        "surroundingCode": "private const val PIXEL_DELTA_ENOUGH_FOR_SCROLLING = 10\n\npublic fun calculateNewTouchState(\n  shiftedMessage: ClientMouseEvent,\n  message: ClientMouseEvent,"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -5015819687260357204
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toAwt/Mouse.kt",
      "language": "kotlin",
      "line": 84,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 82,
        "length": 6,
        "offset": 3,
        "surroundingCode": "}\n\npublic fun createMouseEvent(\n  source: Component,\n  event: ClientMouseEvent,"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 6853264985938760780
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toAwt/Mouse.kt",
      "language": "kotlin",
      "line": 162,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 160,
        "length": 6,
        "offset": 3,
        "surroundingCode": "}\n\npublic fun createMouseWheelEvent(source: Component, event: ClientWheelEvent, connectionMillis: Long): MouseWheelEvent {\n  fun isHorizontal(event: ClientWheelEvent): Boolean {\n    return event.deltaX.absoluteValue > event.deltaY.absoluteValue"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 1725423938336866541
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toAwt/ClientEventExtensions.kt",
      "language": "kotlin",
      "line": 30,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 28,
        "length": 6,
        "offset": 23,
        "surroundingCode": "import java.awt.Point\n\npublic fun ClientMouseEvent.shift(shift: Point): ClientMouseEvent {\n  return copy(\n    x = x + shift.x.toInt(),"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 7443465979058096715
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toAwt/ClientEventExtensions.kt",
      "language": "kotlin",
      "line": 37,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 35,
        "length": 6,
        "offset": 3,
        "surroundingCode": "}\n\npublic fun ClientWheelEvent.shift(shift: Point): ClientWheelEvent {\n  return copy(\n    x = x + shift.x.toInt(),"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -9171746786351529785
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toClient/Shift.kt",
      "language": "kotlin",
      "line": 31,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 29,
        "length": 6,
        "offset": 35,
        "surroundingCode": "import java.awt.Point as AwtPoint\n\npublic fun Component.shiftBounds(shift: AwtPoint): CommonRectangle {\n  return with(bounds) {\n    CommonRectangle("
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -4705671063297548546
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toClient/Shift.kt",
      "language": "kotlin",
      "line": 42,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 40,
        "length": 6,
        "offset": 3,
        "surroundingCode": "}\n\npublic fun AwtPoint.shift(shift: AwtPoint): Point {\n  return Point(\n    (x - shift.x).toDouble(),"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 5923893076374198342
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toClient/Convert.kt",
      "language": "kotlin",
      "line": 41,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 39,
        "length": 6,
        "offset": 26,
        "surroundingCode": "import kotlin.math.floor\n\npublic fun Point2D.toPoint(): Point = Point(x, y)\n\npublic fun Dimension.toCommonIntSize(): CommonIntSize = CommonIntSize(width, height)"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 4986178302953670374
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toClient/Convert.kt",
      "language": "kotlin",
      "line": 43,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 41,
        "length": 6,
        "offset": 51,
        "surroundingCode": "public fun Point2D.toPoint(): Point = Point(x, y)\n\npublic fun Dimension.toCommonIntSize(): CommonIntSize = CommonIntSize(width, height)\n\npublic fun Rectangle.toCommonRectangle(): CommonRectangle = CommonRectangle(x.toDouble(), y.toDouble(), width.toDouble(), height.toDouble())"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -6914728360138673229
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toClient/Convert.kt",
      "language": "kotlin",
      "line": 45,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 43,
        "length": 6,
        "offset": 86,
        "surroundingCode": "public fun Dimension.toCommonIntSize(): CommonIntSize = CommonIntSize(width, height)\n\npublic fun Rectangle.toCommonRectangle(): CommonRectangle = CommonRectangle(x.toDouble(), y.toDouble(), width.toDouble(), height.toDouble())\n\npublic fun Shape.toCommonPath(): CommonPath {"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -1373057490984916432
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toClient/Convert.kt",
      "language": "kotlin",
      "line": 47,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 45,
        "length": 6,
        "offset": 142,
        "surroundingCode": "public fun Rectangle.toCommonRectangle(): CommonRectangle = CommonRectangle(x.toDouble(), y.toDouble(), width.toDouble(), height.toDouble())\n\npublic fun Shape.toCommonPath(): CommonPath {\n  val segments = mutableListOf<PathSegment>()\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -6222300554086575606
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toClient/Convert.kt",
      "language": "kotlin",
      "line": 86,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 84,
        "length": 6,
        "offset": 43,
        "surroundingCode": "\n/* Converts an ARGB number to a color. */\npublic fun Number.toColor(): Color = Color(this.toInt(), true)\n\npublic fun StrokeData.toStroke(): Stroke {"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 8354029914790528231
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toClient/Convert.kt",
      "language": "kotlin",
      "line": 88,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 86,
        "length": 6,
        "offset": 64,
        "surroundingCode": "public fun Number.toColor(): Color = Color(this.toInt(), true)\n\npublic fun StrokeData.toStroke(): Stroke {\n  when (this) {\n    is StrokeData.Basic -> {"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 5595754225171964354
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toClient/Convert.kt",
      "language": "kotlin",
      "line": 115,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 113,
        "length": 6,
        "offset": 3,
        "surroundingCode": "}\n\npublic fun BasicStroke.toBasicStrokeData(): StrokeData.Basic {\n  val cap = when (val cap = endCap) {\n    BasicStroke.CAP_BUTT -> StrokeData.Basic.CapType.BUTT"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -8945741064928331210
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toClient/Convert.kt",
      "language": "kotlin",
      "line": 142,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 140,
        "length": 6,
        "offset": 3,
        "surroundingCode": "}\n\npublic fun Int.toCursorType(): CursorType = when (this) {\n  DEFAULT_CURSOR -> CursorType.DEFAULT\n  CROSSHAIR_CURSOR -> CursorType.CROSSHAIR"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -4336396148374855217
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toClient/Convert.kt",
      "language": "kotlin",
      "line": 165,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 163,
        "length": 6,
        "offset": 3,
        "surroundingCode": "}\n\npublic fun Paint.toPaintValue(): PaintValue = when (this) {\n  is Color -> PaintValue.Color(rgb)\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -5292466982260615980
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toClient/Convert.kt",
      "language": "kotlin",
      "line": 182,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 180,
        "length": 6,
        "offset": 3,
        "surroundingCode": "}\n\npublic fun createSetClipEvent(identitySpaceClip: Shape?): ServerWindowStateEvent = ServerSetClipEvent(\n  with(identitySpaceClip) {\n    when (this) {"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 1795908923357356038
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toClient/Convert.kt",
      "language": "kotlin",
      "line": 194,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 192,
        "length": 6,
        "offset": 3,
        "surroundingCode": ")\n\npublic fun Stroke.toSetStrokeEvent(): ServerWindowStateEvent = when (this) {\n  is BasicStroke -> ServerSetStrokeEvent(this.toBasicStrokeData())\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -7633687738732084098
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toClient/Convert.kt",
      "language": "kotlin",
      "line": 225,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 223,
        "length": 6,
        "offset": 3,
        "surroundingCode": "}\n\npublic fun Composite.toCommonComposite(): CommonComposite = when (this) {\n  is AlphaComposite -> this.toCommonAlphaComposite()\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -8879490674767093956
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toClient/Convert.kt",
      "language": "kotlin",
      "line": 231,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 229,
        "length": 6,
        "offset": 3,
        "surroundingCode": "}\n\npublic fun roundToInfinity(x: Double): Double = when {\n  x.isNaN() || x.isInfinite() -> x\n  x > 0 -> ceil(x)"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 1534186612944307112
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toClient/Transform.kt",
      "language": "kotlin",
      "line": 32,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 30,
        "length": 6,
        "offset": 34,
        "surroundingCode": "import java.awt.geom.Rectangle2D\n\npublic fun <E> extractData(iterable: MutableIterable<E>): List<E> {\n  val answer = mutableListOf<E>()\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -7475228778179000219
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toClient/Transform.kt",
      "language": "kotlin",
      "line": 79,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 77,
        "length": 6,
        "offset": 3,
        "surroundingCode": "}\n\npublic fun List<List<ServerWindowEvent>>.convertToSimpleList(): List<ServerWindowEvent> {\n  val answer = mutableListOf<ServerWindowEvent>()\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 9170716585374025080
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/protocol/HandshakeTypesSelector.kt",
      "language": "kotlin",
      "line": 39,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 37,
        "length": 6,
        "offset": 42,
        "surroundingCode": "public object HandshakeTypesSelector {\n\n  public fun selectToClientCompressor(supportedToClientCompressions: List<CompressionType>): MessageCompressor<ToClientTransferableType>? {\n    fun CompressionType.toToClientCompressor(): MessageCompressor<ToClientTransferableType>? = when (this) {\n      CompressionType.GZIP -> GZipMessageCompressor"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 6605871507347021512
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/protocol/HandshakeTypesSelector.kt",
      "language": "kotlin",
      "line": 49,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 47,
        "length": 6,
        "offset": 7,
        "surroundingCode": "  }\n\n  public fun selectToClientEncoder(supportedToClientProtocols: List<ProtocolType>): ToClientMessageEncoder? {\n    fun ProtocolType.toToClientEncoder(): ToClientMessageEncoder? = when (this) {\n      ProtocolType.KOTLINX_JSON -> KotlinxJsonToClientMessageEncoder"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -7848149446831479568
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/protocol/HandshakeTypesSelector.kt",
      "language": "kotlin",
      "line": 58,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 56,
        "length": 6,
        "offset": 7,
        "surroundingCode": "  }\n\n  public fun selectToServerDecompressor(supportedToServerCompressions: List<CompressionType>): MessageDecompressor<ToServerTransferableType>? {\n    fun CompressionType.toToServerDecompressor(): MessageDecompressor<ToServerTransferableType>? = when (this) {\n      CompressionType.NONE -> NotDecompressor()"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 945913141121618002
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/protocol/HandshakeTypesSelector.kt",
      "language": "kotlin",
      "line": 68,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 66,
        "length": 6,
        "offset": 7,
        "surroundingCode": "  }\n\n  public fun selectToServerDecoder(supportedToServerProtocols: List<ProtocolType>): ToServerMessageDecoder? {\n    fun ProtocolType.toToServerDecoder(): ToServerMessageDecoder? = when (this) {\n      ProtocolType.KOTLINX_JSON -> KotlinxJsonToServerMessageDecoder"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -2929380391044364346
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/protocol/HandshakeTypesSelector.kt",
      "language": "kotlin",
      "line": 37,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 35,
        "length": 6,
        "offset": 82,
        "surroundingCode": "import org.jetbrains.projector.common.protocol.toServer.ToServerTransferableType\n\npublic object HandshakeTypesSelector {\n\n  public fun selectToClientCompressor(supportedToClientCompressions: List<CompressionType>): MessageCompressor<ToClientTransferableType>? {"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -7518248846366057131
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/protocol/KotlinxJsonToClientHandshakeEncoder.kt",
      "language": "kotlin",
      "line": 32,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 30,
        "length": 6,
        "offset": 82,
        "surroundingCode": "import org.jetbrains.projector.common.protocol.toClient.ToClientTransferableType\n\npublic object KotlinxJsonToClientHandshakeEncoder : MessageEncoder<ToClientHandshakeEvent, ToClientTransferableType> {\n\n  override val protocolType: ProtocolType = ProtocolType.KOTLINX_JSON"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 8743245409578039780
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/protocol/KotlinxJsonToServerHandshakeDecoder.kt",
      "language": "kotlin",
      "line": 32,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 30,
        "length": 6,
        "offset": 82,
        "surroundingCode": "import org.jetbrains.projector.common.protocol.toServer.ToServerTransferableType\n\npublic object KotlinxJsonToServerHandshakeDecoder : MessageDecoder<ToServerTransferableType, ToServerHandshakeEvent> {\n\n  override val protocolType: ProtocolType = ProtocolType.KOTLINX_JSON"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -2091553999337672401
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/websocket/HttpWsClient.kt",
      "language": "kotlin",
      "line": 104,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 102,
        "length": 6,
        "offset": 7,
        "surroundingCode": "  }\n\n  public override val wasStarted: Boolean by controlWebSocket::wasStarted\n\n  public override fun start() {"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -73352558567056375
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/websocket/HttpWsClient.kt",
      "language": "kotlin",
      "line": 106,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 104,
        "length": 6,
        "offset": 77,
        "surroundingCode": "  public override val wasStarted: Boolean by controlWebSocket::wasStarted\n\n  public override fun start() {\n    logger.info { \"Control socket connected to server with URI: ${controlWebSocket.uri}\" }\n    controlWebSocket.connect()"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -8300464128084631559
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/websocket/HttpWsClient.kt",
      "language": "kotlin",
      "line": 111,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 109,
        "length": 6,
        "offset": 7,
        "surroundingCode": "  }\n\n  public override fun stop(timeout: Int) {\n    controlWebSocket.close()\n  }"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -6134600789456638662
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/websocket/HttpWsClient.kt",
      "language": "kotlin",
      "line": 115,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 113,
        "length": 6,
        "offset": 7,
        "surroundingCode": "  }\n\n  public override fun forEachOpenedConnection(action: (client: WebSocket) -> Unit) {\n    clients.values.forEach {\n      action(it)"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 1087737555787713224
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/websocket/HttpWsClient.kt",
      "language": "kotlin",
      "line": 38,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 36,
        "length": 6,
        "offset": 35,
        "surroundingCode": "import kotlin.concurrent.withLock\n\npublic abstract class HttpWsClient(\n  private val relayUrl: String,\n  private val serverId: String"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -7428684344851096040
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/websocket/HttpWsServer.kt",
      "language": "kotlin",
      "line": 50,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 48,
        "length": 6,
        "offset": 34,
        "surroundingCode": "\npublic class GetRequestResult(\n  public val statusCode: Short,\n  public val statusText: String,\n  public val contentType: String,"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -7415445063164493412
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/websocket/HttpWsServer.kt",
      "language": "kotlin",
      "line": 51,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 49,
        "length": 6,
        "offset": 65,
        "surroundingCode": "public class GetRequestResult(\n  public val statusCode: Short,\n  public val statusText: String,\n  public val contentType: String,\n  public val content: ByteArray,"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 5539926974023860816
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/websocket/HttpWsServer.kt",
      "language": "kotlin",
      "line": 52,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 50,
        "length": 6,
        "offset": 67,
        "surroundingCode": "  public val statusCode: Short,\n  public val statusText: String,\n  public val contentType: String,\n  public val content: ByteArray,\n)"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 1405533219816311824
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/websocket/HttpWsServer.kt",
      "language": "kotlin",
      "line": 53,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 51,
        "length": 6,
        "offset": 69,
        "surroundingCode": "  public val statusText: String,\n  public val contentType: String,\n  public val content: ByteArray,\n)\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 6001879230926076976
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/websocket/HttpWsServer.kt",
      "language": "kotlin",
      "line": 49,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 47,
        "length": 6,
        "offset": 2,
        "surroundingCode": "\n\npublic class GetRequestResult(\n  public val statusCode: Short,\n  public val statusText: String,"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 594359552695810339
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/websocket/HttpWsServer.kt",
      "language": "kotlin",
      "line": 60,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 58,
        "length": 6,
        "offset": 88,
        "surroundingCode": "public abstract class HttpWsServer(host: InetAddress, port: Int) : HttpWsTransport {\n\n  public constructor(port: Int) : this(getWildcardHostAddress(), port)\n\n  public abstract fun getMainWindows(): List<MainWindow>"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 4432940931557970777
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/websocket/HttpWsServer.kt",
      "language": "kotlin",
      "line": 62,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 60,
        "length": 6,
        "offset": 74,
        "surroundingCode": "  public constructor(port: Int) : this(getWildcardHostAddress(), port)\n\n  public abstract fun getMainWindows(): List<MainWindow>\n\n  public fun onGetRequest(path: String): GetRequestResult {"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -7634032309273131793
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/websocket/HttpWsServer.kt",
      "language": "kotlin",
      "line": 64,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 62,
        "length": 6,
        "offset": 60,
        "surroundingCode": "  public abstract fun getMainWindows(): List<MainWindow>\n\n  public fun onGetRequest(path: String): GetRequestResult {\n    val pathWithoutParams = path.substringBefore('?').substringBefore('#')\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 5914513186641695035
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/websocket/HttpWsServer.kt",
      "language": "kotlin",
      "line": 294,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 292,
        "length": 6,
        "offset": 7,
        "surroundingCode": "  }\n\n  public fun setWebSocketFactory(factory: WebSocketServerFactory) {\n    webSocketServer.setWebSocketFactory(factory)\n  }"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -1177621453645088880
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/websocket/HttpWsServer.kt",
      "language": "kotlin",
      "line": 58,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 56,
        "length": 6,
        "offset": 99,
        "surroundingCode": "private val ClientHandshake.isHttp: Boolean get() = this.getFieldValue(\"Upgrade\").isNullOrBlank()\n\npublic abstract class HttpWsServer(host: InetAddress, port: Int) : HttpWsTransport {\n\n  public constructor(port: Int) : this(getWildcardHostAddress(), port)"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 743737831261925255
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/websocket/MultiTransport.kt",
      "language": "kotlin",
      "line": 29,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 27,
        "length": 6,
        "offset": 28,
        "surroundingCode": "import java.nio.ByteBuffer\n\npublic class MultiTransport(private val transports: List<HttpWsTransport>) : HttpWsTransport {\n  override val wasStarted: Boolean\n    get() = transports.all { it.wasStarted }"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 339787412883681954
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/websocket/HttpWsTransport.kt",
      "language": "kotlin",
      "line": 30,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 28,
        "length": 6,
        "offset": 38,
        "surroundingCode": "\npublic interface HttpWsTransport {\n  public val wasStarted: Boolean\n  public fun start()\n  public fun stop(timeout: Int = 0)"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 8560846116894246609
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/websocket/HttpWsTransport.kt",
      "language": "kotlin",
      "line": 31,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 29,
        "length": 6,
        "offset": 70,
        "surroundingCode": "public interface HttpWsTransport {\n  public val wasStarted: Boolean\n  public fun start()\n  public fun stop(timeout: Int = 0)\n  public fun forEachOpenedConnection(action: (client: WebSocket) -> Unit)"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -8681405525512971223
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/websocket/HttpWsTransport.kt",
      "language": "kotlin",
      "line": 32,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 30,
        "length": 6,
        "offset": 56,
        "surroundingCode": "  public val wasStarted: Boolean\n  public fun start()\n  public fun stop(timeout: Int = 0)\n  public fun forEachOpenedConnection(action: (client: WebSocket) -> Unit)\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -5109726937145117551
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/websocket/HttpWsTransport.kt",
      "language": "kotlin",
      "line": 33,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 31,
        "length": 6,
        "offset": 59,
        "surroundingCode": "  public fun start()\n  public fun stop(timeout: Int = 0)\n  public fun forEachOpenedConnection(action: (client: WebSocket) -> Unit)\n\n  public fun onError(connection: WebSocket?, e: Exception)"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -830077633782194271
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/websocket/HttpWsTransport.kt",
      "language": "kotlin",
      "line": 35,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 33,
        "length": 6,
        "offset": 77,
        "surroundingCode": "  public fun forEachOpenedConnection(action: (client: WebSocket) -> Unit)\n\n  public fun onError(connection: WebSocket?, e: Exception)\n  public fun onWsOpen(connection: WebSocket)\n  public fun onWsClose(connection: WebSocket)"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -3035448101530203398
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/websocket/HttpWsTransport.kt",
      "language": "kotlin",
      "line": 36,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 34,
        "length": 6,
        "offset": 62,
        "surroundingCode": "\n  public fun onError(connection: WebSocket?, e: Exception)\n  public fun onWsOpen(connection: WebSocket)\n  public fun onWsClose(connection: WebSocket)\n  public fun onWsMessage(connection: WebSocket, message: String)"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -6395236209227253123
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/websocket/HttpWsTransport.kt",
      "language": "kotlin",
      "line": 37,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 35,
        "length": 6,
        "offset": 106,
        "surroundingCode": "  public fun onError(connection: WebSocket?, e: Exception)\n  public fun onWsOpen(connection: WebSocket)\n  public fun onWsClose(connection: WebSocket)\n  public fun onWsMessage(connection: WebSocket, message: String)\n  public fun onWsMessage(connection: WebSocket, message: ByteBuffer)"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -2767013595283175477
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/websocket/HttpWsTransport.kt",
      "language": "kotlin",
      "line": 38,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 36,
        "length": 6,
        "offset": 93,
        "surroundingCode": "  public fun onWsOpen(connection: WebSocket)\n  public fun onWsClose(connection: WebSocket)\n  public fun onWsMessage(connection: WebSocket, message: String)\n  public fun onWsMessage(connection: WebSocket, message: ByteBuffer)\n}"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -4433092836561846504
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/websocket/HttpWsTransport.kt",
      "language": "kotlin",
      "line": 39,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 37,
        "length": 6,
        "offset": 113,
        "surroundingCode": "  public fun onWsClose(connection: WebSocket)\n  public fun onWsMessage(connection: WebSocket, message: String)\n  public fun onWsMessage(connection: WebSocket, message: ByteBuffer)\n}"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 1097733249697765169
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/websocket/HttpWsTransport.kt",
      "language": "kotlin",
      "line": 29,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 27,
        "length": 6,
        "offset": 28,
        "surroundingCode": "import java.nio.ByteBuffer\n\npublic interface HttpWsTransport {\n  public val wasStarted: Boolean\n  public fun start()"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 2822151368296457102
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/websocket/TransportBuilder.kt",
      "language": "kotlin",
      "line": 30,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 28,
        "length": 6,
        "offset": 44,
        "surroundingCode": "\npublic abstract class TransportBuilder {\n  public lateinit var onError: (WebSocket?, Exception) -> Unit\n  public lateinit var onWsOpen: (connection: WebSocket) -> Unit\n  public lateinit var onWsClose: (connection: WebSocket) -> Unit"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -1238041404391786000
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/websocket/TransportBuilder.kt",
      "language": "kotlin",
      "line": 31,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 29,
        "length": 6,
        "offset": 106,
        "surroundingCode": "public abstract class TransportBuilder {\n  public lateinit var onError: (WebSocket?, Exception) -> Unit\n  public lateinit var onWsOpen: (connection: WebSocket) -> Unit\n  public lateinit var onWsClose: (connection: WebSocket) -> Unit\n  public lateinit var onWsMessageString: (connection: WebSocket, message: String) -> Unit"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -7936001813746374020
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/websocket/TransportBuilder.kt",
      "language": "kotlin",
      "line": 32,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 30,
        "length": 6,
        "offset": 129,
        "surroundingCode": "  public lateinit var onError: (WebSocket?, Exception) -> Unit\n  public lateinit var onWsOpen: (connection: WebSocket) -> Unit\n  public lateinit var onWsClose: (connection: WebSocket) -> Unit\n  public lateinit var onWsMessageString: (connection: WebSocket, message: String) -> Unit\n  public lateinit var onWsMessageByteBuffer: (connection: WebSocket, message: ByteBuffer) -> Unit"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 238551699180654547
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/websocket/TransportBuilder.kt",
      "language": "kotlin",
      "line": 33,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 31,
        "length": 6,
        "offset": 131,
        "surroundingCode": "  public lateinit var onWsOpen: (connection: WebSocket) -> Unit\n  public lateinit var onWsClose: (connection: WebSocket) -> Unit\n  public lateinit var onWsMessageString: (connection: WebSocket, message: String) -> Unit\n  public lateinit var onWsMessageByteBuffer: (connection: WebSocket, message: ByteBuffer) -> Unit\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -7519409046007512662
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/websocket/TransportBuilder.kt",
      "language": "kotlin",
      "line": 34,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 32,
        "length": 6,
        "offset": 157,
        "surroundingCode": "  public lateinit var onWsClose: (connection: WebSocket) -> Unit\n  public lateinit var onWsMessageString: (connection: WebSocket, message: String) -> Unit\n  public lateinit var onWsMessageByteBuffer: (connection: WebSocket, message: ByteBuffer) -> Unit\n\n  public abstract fun build(): HttpWsTransport"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -2390116927964196398
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/websocket/TransportBuilder.kt",
      "language": "kotlin",
      "line": 36,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 34,
        "length": 6,
        "offset": 101,
        "surroundingCode": "  public lateinit var onWsMessageByteBuffer: (connection: WebSocket, message: ByteBuffer) -> Unit\n\n  public abstract fun build(): HttpWsTransport\n}"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 5942508116828941236
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/websocket/TransportBuilder.kt",
      "language": "kotlin",
      "line": 29,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 27,
        "length": 6,
        "offset": 28,
        "surroundingCode": "import java.nio.ByteBuffer\n\npublic abstract class TransportBuilder {\n  public lateinit var onError: (WebSocket?, Exception) -> Unit\n  public lateinit var onWsOpen: (connection: WebSocket) -> Unit"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -7757209744186785619
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/websocket/HttpWsClientBuilder.kt",
      "language": "kotlin",
      "line": 29,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 27,
        "length": 6,
        "offset": 28,
        "surroundingCode": "import java.nio.ByteBuffer\n\npublic class HttpWsClientBuilder(private val relayUrl: String, private val serverId: String) : TransportBuilder() {\n\n  override fun build(): HttpWsClient {"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 2863759257738215874
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/websocket/HttpWsServerBuilder.kt",
      "language": "kotlin",
      "line": 35,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 33,
        "length": 6,
        "offset": 112,
        "surroundingCode": "public class HttpWsServerBuilder(private val host: InetAddress, private val port: Int): TransportBuilder() {\n\n  public lateinit var getMainWindows: () -> List<MainWindow>\n\n  override fun build(): HttpWsServer {"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -8303145123342079525
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/websocket/HttpWsServerBuilder.kt",
      "language": "kotlin",
      "line": 33,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 31,
        "length": 6,
        "offset": 28,
        "surroundingCode": "import java.nio.ByteBuffer\n\npublic class HttpWsServerBuilder(private val host: InetAddress, private val port: Int): TransportBuilder() {\n\n  public lateinit var getMainWindows: () -> List<MainWindow>"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 205635651048819222
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/websocket/MultiTransportBuilder.kt",
      "language": "kotlin",
      "line": 26,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 24,
        "length": 6,
        "offset": 55,
        "surroundingCode": "package org.jetbrains.projector.server.core.websocket\n\npublic class MultiTransportBuilder(private val builders: List<TransportBuilder>) : TransportBuilder() {\n  override fun build(): HttpWsTransport {\n    val transports = builders.map { prepareBuilder(it) }.map { it.build() }"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -5564986632559709195
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ClientSettings.kt",
      "language": "kotlin",
      "line": 39,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 37,
        "length": 6,
        "offset": 40,
        "surroundingCode": "public sealed class ClientSettings {\n\n  public abstract val connectionMillis: Long\n  public abstract val address: String?\n}"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -2609864385311758142
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ClientSettings.kt",
      "language": "kotlin",
      "line": 40,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 38,
        "length": 6,
        "offset": 48,
        "surroundingCode": "\n  public abstract val connectionMillis: Long\n  public abstract val address: String?\n}\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -544539841770079959
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ClientSettings.kt",
      "language": "kotlin",
      "line": 37,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 35,
        "length": 6,
        "offset": 51,
        "surroundingCode": "import java.util.concurrent.ConcurrentLinkedQueue\n\npublic sealed class ClientSettings {\n\n  public abstract val connectionMillis: Long"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -5031406759699254564
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ClientSettings.kt",
      "language": "kotlin",
      "line": 43,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 41,
        "length": 6,
        "offset": 3,
        "surroundingCode": "}\n\npublic class ConnectedClientSettings(\n  override val connectionMillis: Long,\n  override val address: String?,"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 8717539943644667105
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ClientSettings.kt",
      "language": "kotlin",
      "line": 48,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 46,
        "length": 6,
        "offset": 22,
        "surroundingCode": ") : ClientSettings()\n\npublic class SupportedHandshakeClientSettings(\n  override val connectionMillis: Long,\n  override val address: String?,"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 420891265958540979
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ClientSettings.kt",
      "language": "kotlin",
      "line": 53,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 51,
        "length": 6,
        "offset": 22,
        "surroundingCode": ") : ClientSettings()\n\npublic data class SetUpClientData(\n  val hasWriteAccess: Boolean,\n  val toClientMessageEncoder: ToClientMessageEncoder,"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 6667543828949002297
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ClientSettings.kt",
      "language": "kotlin",
      "line": 64,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 62,
        "length": 6,
        "offset": 74,
        "surroundingCode": "  override val connectionMillis: Long,\n  override val address: String?,\n  public val setUpClientData: SetUpClientData,\n) : ClientSettings()\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 2967208430256714748
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ClientSettings.kt",
      "language": "kotlin",
      "line": 61,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 59,
        "length": 6,
        "offset": 3,
        "surroundingCode": ")\n\npublic class SetUpClientSettings(\n  override val connectionMillis: Long,\n  override val address: String?,"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -1981369638089767925
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ClientSettings.kt",
      "language": "kotlin",
      "line": 70,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 68,
        "length": 6,
        "offset": 74,
        "surroundingCode": "  override val connectionMillis: Long,\n  override val address: String?,\n  public val setUpClientData: SetUpClientData,\n  bigCollectionSize: Int?,\n) : ClientSettings() {"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -9064147336839014730
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ClientSettings.kt",
      "language": "kotlin",
      "line": 74,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 72,
        "length": 6,
        "offset": 26,
        "surroundingCode": ") : ClientSettings() {\n\n  public var touchState: TouchState = TouchState.Released\n\n  public val requestedData: ConcurrentLinkedQueue<ServerEvent> by SizeAware(ConcurrentLinkedQueue<ServerEvent>(), bigCollectionSize, logger)"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -2873941544181910867
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ClientSettings.kt",
      "language": "kotlin",
      "line": 76,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 74,
        "length": 6,
        "offset": 61,
        "surroundingCode": "  public var touchState: TouchState = TouchState.Released\n\n  public val requestedData: ConcurrentLinkedQueue<ServerEvent> by SizeAware(ConcurrentLinkedQueue<ServerEvent>(), bigCollectionSize, logger)\n\n  private companion object {"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 1280130856703466214
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ClientSettings.kt",
      "language": "kotlin",
      "line": 85,
      "offset": 4,
      "length": 6,
      "code": {
        "startLine": 83,
        "length": 6,
        "offset": 40,
        "surroundingCode": "  public sealed class TouchState {\n\n    public object Released : TouchState()\n\n    public data class OnlyPressed("
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 7028311567854185642
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ClientSettings.kt",
      "language": "kotlin",
      "line": 87,
      "offset": 4,
      "length": 6,
      "code": {
        "startLine": 85,
        "length": 6,
        "offset": 47,
        "surroundingCode": "    public object Released : TouchState()\n\n    public data class OnlyPressed(\n      val connectionMillis: Int,\n      override val lastX: Int,"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 2198537625447424078
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ClientSettings.kt",
      "language": "kotlin",
      "line": 93,
      "offset": 4,
      "length": 6,
      "code": {
        "startLine": 91,
        "length": 6,
        "offset": 43,
        "surroundingCode": "    ) : TouchState(), WithCoordinates\n\n    public object Dragging : TouchState()\n\n    public data class Scrolling("
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 33449674349574986
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ClientSettings.kt",
      "language": "kotlin",
      "line": 95,
      "offset": 4,
      "length": 6,
      "code": {
        "startLine": 93,
        "length": 6,
        "offset": 47,
        "surroundingCode": "    public object Dragging : TouchState()\n\n    public data class Scrolling(\n      val initialX: Int, val initialY: Int,\n      override val lastX: Int, override val lastY: Int,"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -1139654057265393590
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ClientSettings.kt",
      "language": "kotlin",
      "line": 102,
      "offset": 6,
      "length": 6,
      "code": {
        "startLine": 100,
        "length": 6,
        "offset": 46,
        "surroundingCode": "    public interface WithCoordinates {\n\n      public val lastX: Int\n      public val lastY: Int\n    }"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -5407802488417611684
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ClientSettings.kt",
      "language": "kotlin",
      "line": 103,
      "offset": 6,
      "length": 6,
      "code": {
        "startLine": 101,
        "length": 6,
        "offset": 35,
        "surroundingCode": "\n      public val lastX: Int\n      public val lastY: Int\n    }\n  }"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -3316580029749058471
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ClientSettings.kt",
      "language": "kotlin",
      "line": 100,
      "offset": 4,
      "length": 6,
      "code": {
        "startLine": 98,
        "length": 6,
        "offset": 43,
        "surroundingCode": "    ) : TouchState(), WithCoordinates\n\n    public interface WithCoordinates {\n\n      public val lastX: Int"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 2945892260259434612
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ClientSettings.kt",
      "language": "kotlin",
      "line": 83,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 81,
        "length": 6,
        "offset": 7,
        "surroundingCode": "  }\n\n  public sealed class TouchState {\n\n    public object Released : TouchState()"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -8747158548422126874
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ClientSettings.kt",
      "language": "kotlin",
      "line": 67,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 65,
        "length": 6,
        "offset": 22,
        "surroundingCode": ") : ClientSettings()\n\npublic class ReadyClientSettings(\n  override val connectionMillis: Long,\n  override val address: String?,"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -3696527725613164885
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ClientSettings.kt",
      "language": "kotlin",
      "line": 111,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 109,
        "length": 6,
        "offset": 74,
        "surroundingCode": "  override val connectionMillis: Long,\n  override val address: String?,\n  public val reason: String,\n) : ClientSettings()"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -1075400461428766061
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ClientSettings.kt",
      "language": "kotlin",
      "line": 108,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 106,
        "length": 6,
        "offset": 3,
        "surroundingCode": "}\n\npublic class ClosedClientSettings(\n  override val connectionMillis: Long,\n  override val address: String?,"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -6087012695555660037
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-agent-common/src/main/kotlin/org/jetbrains/projector/agent/common/Misc.kt",
      "language": "kotlin",
      "line": 30,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 28,
        "length": 6,
        "offset": 26,
        "surroundingCode": "import javassist.CtClass\n\npublic fun getClassFromClassfileBuffer(pool: ClassPool, classSlashedName: String, classfileBuffer: ByteArray): CtClass {\n  val fqn = classSlashedName.replace('/', '.')\n  pool.insertClassPath(ByteArrayClassPath(fqn, classfileBuffer))"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-agent-common.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -9098246369784387196
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-agent-ij-injector/src/main/kotlin/org/jetbrains/projector/agent/ijInjector/IjInjectorAgent.kt",
      "language": "kotlin",
      "line": 35,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 33,
        "length": 6,
        "offset": 16,
        "surroundingCode": "\n  @JvmStatic\n  public fun agentmain(args: String, instrumentation: Instrumentation) {\n    logger.debug { \"IjInjectorAgent agentmain start, args=$args\" }\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-agent-ij-injector.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 976271041250252245
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-agent-ij-injector/src/main/kotlin/org/jetbrains/projector/agent/ijInjector/IjInjectorAgent.kt",
      "language": "kotlin",
      "line": 30,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 28,
        "length": 6,
        "offset": 45,
        "surroundingCode": "import java.lang.instrument.Instrumentation\n\npublic object IjInjectorAgent {\n\n  private val logger = Logger<IjInjectorAgent>()"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-agent-ij-injector.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 8366581444614665661
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-agent-initialization/src/main/kotlin/org/jetbrains/projector/agent/init/IjArgs.kt",
      "language": "kotlin",
      "line": 27,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 25,
        "length": 6,
        "offset": 26,
        "surroundingCode": "\npublic object IjArgs {\n  public const val IS_AGENT: String = \"isAgent\"\n  public const val IJ_CL_PROVIDER_CLASS: String = \"ijClProviderClass\"\n  public const val IJ_CL_PROVIDER_METHOD: String = \"ijClProviderMethod\""
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-agent-initialization.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 285878895443016369
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-agent-initialization/src/main/kotlin/org/jetbrains/projector/agent/init/IjArgs.kt",
      "language": "kotlin",
      "line": 28,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 26,
        "length": 6,
        "offset": 73,
        "surroundingCode": "public object IjArgs {\n  public const val IS_AGENT: String = \"isAgent\"\n  public const val IJ_CL_PROVIDER_CLASS: String = \"ijClProviderClass\"\n  public const val IJ_CL_PROVIDER_METHOD: String = \"ijClProviderMethod\"\n  public const val MD_PANEL_MAKER_CLASS: String = \"mdPanelMakerClass\""
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-agent-initialization.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 8905931835590786633
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-agent-initialization/src/main/kotlin/org/jetbrains/projector/agent/init/IjArgs.kt",
      "language": "kotlin",
      "line": 29,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 27,
        "length": 6,
        "offset": 120,
        "surroundingCode": "  public const val IS_AGENT: String = \"isAgent\"\n  public const val IJ_CL_PROVIDER_CLASS: String = \"ijClProviderClass\"\n  public const val IJ_CL_PROVIDER_METHOD: String = \"ijClProviderMethod\"\n  public const val MD_PANEL_MAKER_CLASS: String = \"mdPanelMakerClass\"\n  public const val MD_PANEL_MAKER_METHOD: String = \"mdPanelMakerMethod\""
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-agent-initialization.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -4677006100492289166
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-agent-initialization/src/main/kotlin/org/jetbrains/projector/agent/init/IjArgs.kt",
      "language": "kotlin",
      "line": 30,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 28,
        "length": 6,
        "offset": 144,
        "surroundingCode": "  public const val IJ_CL_PROVIDER_CLASS: String = \"ijClProviderClass\"\n  public const val IJ_CL_PROVIDER_METHOD: String = \"ijClProviderMethod\"\n  public const val MD_PANEL_MAKER_CLASS: String = \"mdPanelMakerClass\"\n  public const val MD_PANEL_MAKER_METHOD: String = \"mdPanelMakerMethod\"\n}"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-agent-initialization.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -7532022685850968999
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-agent-initialization/src/main/kotlin/org/jetbrains/projector/agent/init/IjArgs.kt",
      "language": "kotlin",
      "line": 31,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 29,
        "length": 6,
        "offset": 144,
        "surroundingCode": "  public const val IJ_CL_PROVIDER_METHOD: String = \"ijClProviderMethod\"\n  public const val MD_PANEL_MAKER_CLASS: String = \"mdPanelMakerClass\"\n  public const val MD_PANEL_MAKER_METHOD: String = \"mdPanelMakerMethod\"\n}\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-agent-initialization.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -7121602821074953728
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-agent-initialization/src/main/kotlin/org/jetbrains/projector/agent/init/IjArgs.kt",
      "language": "kotlin",
      "line": 26,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 24,
        "length": 6,
        "offset": 44,
        "surroundingCode": "package org.jetbrains.projector.agent.init\n\npublic object IjArgs {\n  public const val IS_AGENT: String = \"isAgent\"\n  public const val IJ_CL_PROVIDER_CLASS: String = \"ijClProviderClass\""
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-agent-initialization.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": 421434954936705146
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-agent-initialization/src/main/kotlin/org/jetbrains/projector/agent/init/IjArgs.kt",
      "language": "kotlin",
      "line": 34,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 32,
        "length": 6,
        "offset": 3,
        "surroundingCode": "}\n\npublic fun Map<String, Any>.toIjArgs(): String {\n  return entries.joinToString(separator = \";\") { \"${it.key}=${it.value}\" }\n}"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-agent-initialization.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -1236558402322967442
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Redundant visibility modifier",
  "severity": "High",
  "comment": "Redundant visibility modifier",
  "detailsInfo": "<html>\n<body>\nThis inspection reports visibility modifiers which match the default visibility of an element\n(<b>public</b> for most elements, <b>protected</b> for members that override a protected member).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-agent-initialization/src/main/kotlin/org/jetbrains/projector/agent/init/IjArgs.kt",
      "language": "kotlin",
      "line": 38,
      "offset": 0,
      "length": 6,
      "code": {
        "startLine": 36,
        "length": 6,
        "offset": 3,
        "surroundingCode": "}\n\npublic fun String.toArgsMap(): Map<String, String> {\n\n  return split(\";\").associate {"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-agent-initialization.main",
    "inspectionName": "RedundantVisibilityModifier"
  },
  "hash": -4095575387736661459
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Remove empty primary constructor",
  "severity": "Moderate",
  "comment": "Remove empty primary constructor",
  "detailsInfo": "<html>\n<body>\nThis inspection detects an empty primary constructor when it would be implicitly available anyway.\n</body>\n</html>",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-common/src/jvmMain/kotlin/org/jetbrains/projector/client/common/canvas/SwingCanvas.kt",
      "language": "kotlin",
      "line": 32,
      "offset": 17,
      "length": 2,
      "code": {
        "startLine": 30,
        "length": 2,
        "offset": 41,
        "surroundingCode": "import kotlin.math.max\n\nclass SwingCanvas() : Canvas {\n\n  var image = BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB)"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-common.jvmMain",
    "inspectionName": "RemoveEmptyPrimaryConstructor"
  },
  "hash": -4781161996548578526
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Remove redundant calls of conversion methods",
  "severity": "High",
  "comment": "Remove redundant calls of the conversion method",
  "detailsInfo": "<html>\n<body>\nThis inspection reports redundant calls of conversion methods (for example, <b>toString()</b> on a <b>String</b>).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toAwt/ClientEventExtensions.kt",
      "language": "kotlin",
      "line": 32,
      "offset": 20,
      "length": 7,
      "code": {
        "startLine": 30,
        "length": 7,
        "offset": 103,
        "surroundingCode": "public fun ClientMouseEvent.shift(shift: Point): ClientMouseEvent {\n  return copy(\n    x = x + shift.x.toInt(),\n    y = y + shift.y.toInt()\n  )"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RemoveRedundantCallsOfConversionMethods"
  },
  "hash": -5909847128516518050
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Remove redundant calls of conversion methods",
  "severity": "High",
  "comment": "Remove redundant calls of the conversion method",
  "detailsInfo": "<html>\n<body>\nThis inspection reports redundant calls of conversion methods (for example, <b>toString()</b> on a <b>String</b>).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toAwt/ClientEventExtensions.kt",
      "language": "kotlin",
      "line": 33,
      "offset": 20,
      "length": 7,
      "code": {
        "startLine": 31,
        "length": 7,
        "offset": 64,
        "surroundingCode": "  return copy(\n    x = x + shift.x.toInt(),\n    y = y + shift.y.toInt()\n  )\n}\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RemoveRedundantCallsOfConversionMethods"
  },
  "hash": -1932764279492843077
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Remove redundant calls of conversion methods",
  "severity": "High",
  "comment": "Remove redundant calls of the conversion method",
  "detailsInfo": "<html>\n<body>\nThis inspection reports redundant calls of conversion methods (for example, <b>toString()</b> on a <b>String</b>).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toAwt/ClientEventExtensions.kt",
      "language": "kotlin",
      "line": 39,
      "offset": 20,
      "length": 7,
      "code": {
        "startLine": 37,
        "length": 7,
        "offset": 103,
        "surroundingCode": "public fun ClientWheelEvent.shift(shift: Point): ClientWheelEvent {\n  return copy(\n    x = x + shift.x.toInt(),\n    y = y + shift.y.toInt()\n  )"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RemoveRedundantCallsOfConversionMethods"
  },
  "hash": -8018850732826697695
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Remove redundant calls of conversion methods",
  "severity": "High",
  "comment": "Remove redundant calls of the conversion method",
  "detailsInfo": "<html>\n<body>\nThis inspection reports redundant calls of conversion methods (for example, <b>toString()</b> on a <b>String</b>).\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toAwt/ClientEventExtensions.kt",
      "language": "kotlin",
      "line": 40,
      "offset": 20,
      "length": 7,
      "code": {
        "startLine": 38,
        "length": 7,
        "offset": 64,
        "surroundingCode": "  return copy(\n    x = x + shift.x.toInt(),\n    y = y + shift.y.toInt()\n  )\n}"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "RemoveRedundantCallsOfConversionMethods"
  },
  "hash": -1859781241389152837
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Call chain on collection type can be simplified",
  "severity": "Moderate",
  "comment": "Call chain on collection type may be simplified",
  "detailsInfo": "<html>\n<body>\nThis inspection reports two-call chains replaceable by a single call, e.g. <b>map {}.filterNotNull()</b> to <b>mapNotNull {}</b>.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/build.gradle.kts",
      "language": "kotlin",
      "line": 113,
      "offset": 44,
      "length": 3,
      "code": {
        "startLine": 111,
        "length": 3,
        "offset": 109,
        "surroundingCode": "  classpath = sourceSets[intTestSourceSetName].runtimeClasspath\n\n  systemProperties = System.getProperties().map { (k, v) -> k.toString() to v }.toMap()\n\n  shouldRunAfter(\"test\")"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core",
    "inspectionName": "SimplifiableCallChain"
  },
  "hash": 1479584282910808939
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unnecessary local variable",
  "severity": "Moderate",
  "comment": "Variable is same as 'windowHeaderActiveText' and can be inlined",
  "detailsInfo": "<html>\n<body>\nThis inspection reports local variables either used only in the very next <b>return</b> statement or exact copies of other variables.\nIn both cases it's better to inline such a variable.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/IdeColors.kt",
      "language": "kotlin",
      "line": 96,
      "offset": 10,
      "length": 24,
      "code": {
        "startLine": 94,
        "length": 24,
        "offset": 190,
        "surroundingCode": "      val labelForegroundMethod = labelClass.getDeclaredMethod(\"foreground\")\n      val windowHeaderActiveText = PaintValue.Color((labelForegroundMethod.invoke(null) as Color).rgb)\n      val windowHeaderInactiveText = windowHeaderActiveText\n\n      return ServerWindowColorsEvent.ColorsStorage("
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnnecessaryVariable"
  },
  "hash": 7072268202768369478
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"BACKGROUND_COLOR_ARGB\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-common/src/commonMain/kotlin/org/jetbrains/projector/common/misc/Defaults.kt",
      "language": "kotlin",
      "line": 33,
      "offset": 12,
      "length": 21,
      "code": {
        "startLine": 31,
        "length": 21,
        "offset": 71,
        "surroundingCode": "\n  const val FOREGROUND_COLOR_ARGB = 0xFF_00_00_00.toInt()\n  const val BACKGROUND_COLOR_ARGB = 0xFF_FF_FF_FF.toInt()\n\n  val STROKE = StrokeData.Basic(  // from Graphics2D \"Default Rendering Attributes\" java doc"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -3804518074129532604
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"codeMap\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-common/src/commonMain/kotlin/org/jetbrains/projector/common/protocol/data/VK.kt",
      "language": "kotlin",
      "line": 222,
      "offset": 8,
      "length": 7,
      "code": {
        "startLine": 220,
        "length": 7,
        "offset": 30,
        "surroundingCode": "  companion object {\n\n    val codeMap by lazy { values().flatMap { key -> key.typedSymbols.map { it to key } }.toMap() }\n  }\n}"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -931910138178558156
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"createExtended\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-common/src/commonMain/kotlin/org/jetbrains/projector/common/protocol/data/CommonShape.kt",
      "language": "kotlin",
      "line": 47,
      "offset": 6,
      "length": 14,
      "code": {
        "startLine": 45,
        "length": 14,
        "offset": 122,
        "surroundingCode": "  fun contains(x: Int, y: Int) = this.x <= x && x < this.x + this.width && this.y <= y && y < this.y + this.height\n\n  fun createExtended(extend: Double) = CommonRectangle(x - extend, y - extend, width + extend * 2, height + extend * 2)\n}\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": 6190223085790679861
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"WINDOW\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-common/src/commonMain/kotlin/org/jetbrains/projector/common/protocol/toClient/WindowData.kt",
      "language": "kotlin",
      "line": 35,
      "offset": 2,
      "length": 6,
      "code": {
        "startLine": 33,
        "length": 6,
        "offset": 45,
        "surroundingCode": "enum class WindowType {\n  @SerialName(\"a\")\n  WINDOW,\n\n  @SerialName(\"b\")"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": 1234701545339613518
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"POPUP\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-common/src/commonMain/kotlin/org/jetbrains/projector/common/protocol/toClient/WindowData.kt",
      "language": "kotlin",
      "line": 38,
      "offset": 2,
      "length": 5,
      "code": {
        "startLine": 36,
        "length": 5,
        "offset": 22,
        "surroundingCode": "\n  @SerialName(\"b\")\n  POPUP,\n\n  @SerialName(\"c\")"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": 8999704603144921661
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Object \"NoCarets\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-common/src/commonMain/kotlin/org/jetbrains/projector/common/protocol/toClient/ServerEvent.kt",
      "language": "kotlin",
      "line": 112,
      "offset": 11,
      "length": 8,
      "code": {
        "startLine": 110,
        "length": 8,
        "offset": 50,
        "surroundingCode": "    @Serializable\n    @SerialName(\"a\")\n    object NoCarets : CaretInfoChange()\n\n    @Serializable"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -355388621318430865
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"Carets\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-common/src/commonMain/kotlin/org/jetbrains/projector/common/protocol/toClient/ServerEvent.kt",
      "language": "kotlin",
      "line": 116,
      "offset": 15,
      "length": 6,
      "code": {
        "startLine": 114,
        "length": 6,
        "offset": 54,
        "surroundingCode": "    @Serializable\n    @SerialName(\"b\")\n    data class Carets(\n      @SerialName(\"a\")\n      val caretInfoList: List<CaretInfo> = emptyList(),  // todo: remove default after https://github.com/Kotlin/kotlinx.serialization/issues/806"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": 6192402246282314034
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"ServerMarkdownShowEvent\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-common/src/commonMain/kotlin/org/jetbrains/projector/common/protocol/toClient/ServerEvent.kt",
      "language": "kotlin",
      "line": 140,
      "offset": 13,
      "length": 23,
      "code": {
        "startLine": 138,
        "length": 23,
        "offset": 48,
        "surroundingCode": "  @Serializable\n  @SerialName(\"g\")\n  data class ServerMarkdownShowEvent(\n    @SerialName(\"a\")\n    val panelId: Int,"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": 568408945329614976
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"ServerMarkdownResizeEvent\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-common/src/commonMain/kotlin/org/jetbrains/projector/common/protocol/toClient/ServerEvent.kt",
      "language": "kotlin",
      "line": 149,
      "offset": 13,
      "length": 25,
      "code": {
        "startLine": 147,
        "length": 25,
        "offset": 48,
        "surroundingCode": "  @Serializable\n  @SerialName(\"h\")\n  data class ServerMarkdownResizeEvent(\n    @SerialName(\"a\")\n    val panelId: Int,"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -6553554508587099124
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"ServerMarkdownMoveEvent\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-common/src/commonMain/kotlin/org/jetbrains/projector/common/protocol/toClient/ServerEvent.kt",
      "language": "kotlin",
      "line": 158,
      "offset": 13,
      "length": 23,
      "code": {
        "startLine": 156,
        "length": 23,
        "offset": 48,
        "surroundingCode": "  @Serializable\n  @SerialName(\"i\")\n  data class ServerMarkdownMoveEvent(\n    @SerialName(\"a\")\n    val panelId: Int,"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -1338759100001822580
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"ServerMarkdownDisposeEvent\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-common/src/commonMain/kotlin/org/jetbrains/projector/common/protocol/toClient/ServerEvent.kt",
      "language": "kotlin",
      "line": 167,
      "offset": 13,
      "length": 26,
      "code": {
        "startLine": 165,
        "length": 26,
        "offset": 48,
        "surroundingCode": "  @Serializable\n  @SerialName(\"j\")\n  data class ServerMarkdownDisposeEvent(\n    @SerialName(\"a\")\n    val panelId: Int,"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -4644223392111098787
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"ServerMarkdownPlaceToWindowEvent\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-common/src/commonMain/kotlin/org/jetbrains/projector/common/protocol/toClient/ServerEvent.kt",
      "language": "kotlin",
      "line": 174,
      "offset": 13,
      "length": 32,
      "code": {
        "startLine": 172,
        "length": 32,
        "offset": 48,
        "surroundingCode": "  @Serializable\n  @SerialName(\"k\")\n  data class ServerMarkdownPlaceToWindowEvent(\n    @SerialName(\"a\")\n    val panelId: Int,"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -8411285925906911416
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"ServerMarkdownSetHtmlEvent\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-common/src/commonMain/kotlin/org/jetbrains/projector/common/protocol/toClient/ServerEvent.kt",
      "language": "kotlin",
      "line": 183,
      "offset": 13,
      "length": 26,
      "code": {
        "startLine": 181,
        "length": 26,
        "offset": 48,
        "surroundingCode": "  @Serializable\n  @SerialName(\"l\")\n  data class ServerMarkdownSetHtmlEvent(\n    @SerialName(\"a\")\n    val panelId: Int,"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -7015414367310316847
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"ServerMarkdownSetCssEvent\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-common/src/commonMain/kotlin/org/jetbrains/projector/common/protocol/toClient/ServerEvent.kt",
      "language": "kotlin",
      "line": 192,
      "offset": 13,
      "length": 25,
      "code": {
        "startLine": 190,
        "length": 25,
        "offset": 48,
        "surroundingCode": "  @Serializable\n  @SerialName(\"m\")\n  data class ServerMarkdownSetCssEvent(\n    @SerialName(\"a\")\n    val panelId: Int,"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": 8986309944193076270
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"ServerMarkdownScrollEvent\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-common/src/commonMain/kotlin/org/jetbrains/projector/common/protocol/toClient/ServerEvent.kt",
      "language": "kotlin",
      "line": 201,
      "offset": 13,
      "length": 25,
      "code": {
        "startLine": 199,
        "length": 25,
        "offset": 48,
        "surroundingCode": "  @Serializable\n  @SerialName(\"n\")\n  data class ServerMarkdownScrollEvent(\n    @SerialName(\"a\")\n    val panelId: Int,"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -7808117622276419586
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"ServerMarkdownBrowseUriEvent\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-common/src/commonMain/kotlin/org/jetbrains/projector/common/protocol/toClient/ServerEvent.kt",
      "language": "kotlin",
      "line": 211,
      "offset": 13,
      "length": 28,
      "code": {
        "startLine": 209,
        "length": 28,
        "offset": 48,
        "surroundingCode": "  @Serializable\n  @SerialName(\"o\")\n  data class ServerMarkdownBrowseUriEvent(\n    @SerialName(\"a\")\n    val link: String,"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -2176977502038878714
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"ServerPaintArcEvent\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-common/src/commonMain/kotlin/org/jetbrains/projector/common/protocol/toClient/ServerWindowEvent.kt",
      "language": "kotlin",
      "line": 47,
      "offset": 11,
      "length": 19,
      "code": {
        "startLine": 45,
        "length": 19,
        "offset": 42,
        "surroundingCode": "@Serializable\n@SerialName(\"a\")\ndata class ServerPaintArcEvent(\n  @SerialName(\"a\")\n  val paintType: PaintType,"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -5781201382025159292
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Object \"ServerDrawRenderedImageEvent\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-common/src/commonMain/kotlin/org/jetbrains/projector/common/protocol/toClient/ServerWindowEvent.kt",
      "language": "kotlin",
      "line": 170,
      "offset": 7,
      "length": 28,
      "code": {
        "startLine": 168,
        "length": 28,
        "offset": 38,
        "surroundingCode": "@Serializable\n@SerialName(\"j\")\nobject ServerDrawRenderedImageEvent : ServerWindowToDoPaintEvent()\n\n@Serializable"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -487383869609632490
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Object \"ServerDrawRenderableImageEvent\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-common/src/commonMain/kotlin/org/jetbrains/projector/common/protocol/toClient/ServerWindowEvent.kt",
      "language": "kotlin",
      "line": 174,
      "offset": 7,
      "length": 30,
      "code": {
        "startLine": 172,
        "length": 30,
        "offset": 38,
        "surroundingCode": "@Serializable\n@SerialName(\"k\")\nobject ServerDrawRenderableImageEvent : ServerWindowToDoPaintEvent()\n\n@Serializable"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -8309624358605278329
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"deserializeList\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-common/src/commonMain/kotlin/org/jetbrains/projector/common/protocol/toClient/KotlinxJsonServerEventSerializer.kt",
      "language": "kotlin",
      "line": 41,
      "offset": 6,
      "length": 15,
      "code": {
        "startLine": 39,
        "length": 15,
        "offset": 98,
        "surroundingCode": "\n  fun serializeList(msg: List<ServerEvent>): String = json.encodeToString(serializer, msg)\n  fun deserializeList(data: String): List<ServerEvent> = json.decodeFromString(serializer, data)\n}"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -2091022156817392799
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"NW\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-common/src/commonMain/kotlin/org/jetbrains/projector/common/protocol/toServer/ClientEvent.kt",
      "language": "kotlin",
      "line": 30,
      "offset": 2,
      "length": 2,
      "code": {
        "startLine": 28,
        "length": 2,
        "offset": 32,
        "surroundingCode": "\nenum class ResizeDirection {\n  NW,\n  SW,\n  NE,"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": 9104716838191883857
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"SW\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-common/src/commonMain/kotlin/org/jetbrains/projector/common/protocol/toServer/ClientEvent.kt",
      "language": "kotlin",
      "line": 31,
      "offset": 2,
      "length": 2,
      "code": {
        "startLine": 29,
        "length": 2,
        "offset": 37,
        "surroundingCode": "enum class ResizeDirection {\n  NW,\n  SW,\n  NE,\n  SE,"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -2889850155753090042
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"NE\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-common/src/commonMain/kotlin/org/jetbrains/projector/common/protocol/toServer/ClientEvent.kt",
      "language": "kotlin",
      "line": 32,
      "offset": 2,
      "length": 2,
      "code": {
        "startLine": 30,
        "length": 2,
        "offset": 14,
        "surroundingCode": "  NW,\n  SW,\n  NE,\n  SE,\n  N,"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -5185640385156148622
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"N\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-common/src/commonMain/kotlin/org/jetbrains/projector/common/protocol/toServer/ClientEvent.kt",
      "language": "kotlin",
      "line": 34,
      "offset": 2,
      "length": 1,
      "code": {
        "startLine": 32,
        "length": 1,
        "offset": 14,
        "surroundingCode": "  NE,\n  SE,\n  N,\n  W,\n  S,"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -2130538941880233838
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"W\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-common/src/commonMain/kotlin/org/jetbrains/projector/common/protocol/toServer/ClientEvent.kt",
      "language": "kotlin",
      "line": 35,
      "offset": 2,
      "length": 1,
      "code": {
        "startLine": 33,
        "length": 1,
        "offset": 13,
        "surroundingCode": "  SE,\n  N,\n  W,\n  S,\n  E"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": 3241406039935619574
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"S\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-common/src/commonMain/kotlin/org/jetbrains/projector/common/protocol/toServer/ClientEvent.kt",
      "language": "kotlin",
      "line": 36,
      "offset": 2,
      "length": 1,
      "code": {
        "startLine": 34,
        "length": 1,
        "offset": 12,
        "surroundingCode": "  N,\n  W,\n  S,\n  E\n}"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -2931665711805307761
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"E\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-common/src/commonMain/kotlin/org/jetbrains/projector/common/protocol/toServer/ClientEvent.kt",
      "language": "kotlin",
      "line": 37,
      "offset": 2,
      "length": 1,
      "code": {
        "startLine": 35,
        "length": 1,
        "offset": 12,
        "surroundingCode": "  W,\n  S,\n  E\n}\n\nenum class MouseModifier {"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -5850436524818701248
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"ClientResizeEvent\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-common/src/commonMain/kotlin/org/jetbrains/projector/common/protocol/toServer/ClientEvent.kt",
      "language": "kotlin",
      "line": 153,
      "offset": 11,
      "length": 17,
      "code": {
        "startLine": 151,
        "length": 17,
        "offset": 26,
        "surroundingCode": "\n@Serializable\ndata class ClientResizeEvent(val size: CommonIntSize) : ClientEvent()\n\n@Serializable"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": 7820958325020010388
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"ClientClipboardEvent\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-common/src/commonMain/kotlin/org/jetbrains/projector/common/protocol/toServer/ClientEvent.kt",
      "language": "kotlin",
      "line": 159,
      "offset": 11,
      "length": 20,
      "code": {
        "startLine": 157,
        "length": 20,
        "offset": 26,
        "surroundingCode": "\n@Serializable\ndata class ClientClipboardEvent(\n  val stringContent: String,  // TODO: support more types\n) : ClientEvent()"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -3012765589345183595
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"ClientSetKeymapEvent\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-common/src/commonMain/kotlin/org/jetbrains/projector/common/protocol/toServer/ClientEvent.kt",
      "language": "kotlin",
      "line": 170,
      "offset": 11,
      "length": 20,
      "code": {
        "startLine": 168,
        "length": 20,
        "offset": 26,
        "surroundingCode": "\n@Serializable\ndata class ClientSetKeymapEvent(\n  val keymap: UserKeymap,\n) : ClientEvent()"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": 409405135881663858
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"ClientOpenLinkEvent\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-common/src/commonMain/kotlin/org/jetbrains/projector/common/protocol/toServer/ClientEvent.kt",
      "language": "kotlin",
      "line": 175,
      "offset": 11,
      "length": 19,
      "code": {
        "startLine": 173,
        "length": 19,
        "offset": 26,
        "surroundingCode": "\n@Serializable\ndata class ClientOpenLinkEvent(\n  val link: String,\n) : ClientEvent()"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": 8307515394724117936
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"ClientWindowSetBoundsEvent\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-common/src/commonMain/kotlin/org/jetbrains/projector/common/protocol/toServer/ClientEvent.kt",
      "language": "kotlin",
      "line": 196,
      "offset": 11,
      "length": 26,
      "code": {
        "startLine": 194,
        "length": 26,
        "offset": 26,
        "surroundingCode": "\n@Serializable\ndata class ClientWindowSetBoundsEvent(\n  val windowId: Int,\n  val bounds: CommonIntRectangle"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": 4014390768602132203
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Object \"GreetingControlEvent\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-common/src/commonMain/kotlin/org/jetbrains/projector/common/protocol/toServer/RelayControlEvent.kt",
      "language": "kotlin",
      "line": 34,
      "offset": 7,
      "length": 20,
      "code": {
        "startLine": 32,
        "length": 20,
        "offset": 45,
        "surroundingCode": "@Serializable\n@SerialName(\"greeting\")\nobject GreetingControlEvent : RelayControlEvent()\n\n@Serializable"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": 837897706505497819
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"reset\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-common/src/commonMain/kotlin/org/jetbrains/projector/common/statistics/Rate.kt",
      "language": "kotlin",
      "line": 41,
      "offset": 6,
      "length": 5,
      "code": {
        "startLine": 39,
        "length": 5,
        "offset": 11,
        "surroundingCode": "  }\n\n  fun reset(currentTimeStampMs: Double): ResetResult {\n    // todo: synchronization is needed here\n    val lastMs = lastTimeStampMs"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -5280907786957092691
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"generateString\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-common/src/commonMain/kotlin/org/jetbrains/projector/common/statistics/Rate.kt",
      "language": "kotlin",
      "line": 66,
      "offset": 8,
      "length": 14,
      "code": {
        "startLine": 64,
        "length": 14,
        "offset": 53,
        "surroundingCode": "  inner class ResetResult(val data: Data) {\n\n    fun generateString(separator: String): String = \"$name rate:$separator${data.generateString(roundingStrategy, unit, separator)}\"\n  }\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": 2625665957513258057
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"createForDouble\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-common/src/commonMain/kotlin/org/jetbrains/projector/common/statistics/Rate.kt",
      "language": "kotlin",
      "line": 103,
      "offset": 8,
      "length": 15,
      "code": {
        "startLine": 101,
        "length": 15,
        "offset": 30,
        "surroundingCode": "  companion object {\n\n    fun createForDouble(name: String, roundingStrategy: RoundingStrategy, unit: String? = null): Rate<Double> =\n      Rate(DoubleValue(), unit, name, roundingStrategy)\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": 6114798145526801282
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"createForLong\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-common/src/commonMain/kotlin/org/jetbrains/projector/common/statistics/Rate.kt",
      "language": "kotlin",
      "line": 106,
      "offset": 8,
      "length": 13,
      "code": {
        "startLine": 104,
        "length": 13,
        "offset": 65,
        "surroundingCode": "      Rate(DoubleValue(), unit, name, roundingStrategy)\n\n    fun createForLong(name: String, roundingStrategy: RoundingStrategy, unit: String? = null): Rate<Long> =\n      Rate(LongValue(), unit, name, roundingStrategy)\n  }"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -8844623156672734348
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"Rate\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-common/src/commonMain/kotlin/org/jetbrains/projector/common/statistics/Rate.kt",
      "language": "kotlin",
      "line": 27,
      "offset": 6,
      "length": 4,
      "code": {
        "startLine": 25,
        "length": 4,
        "offset": 26,
        "surroundingCode": "\n// todo: add tests\nclass Rate<ValueType : Number> private constructor(\n  private val value: StatsValue<ValueType>,\n  private val unit: String?,"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": 4217824763166725557
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"generateString\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-common/src/commonMain/kotlin/org/jetbrains/projector/common/statistics/Average.kt",
      "language": "kotlin",
      "line": 58,
      "offset": 8,
      "length": 14,
      "code": {
        "startLine": 56,
        "length": 14,
        "offset": 53,
        "surroundingCode": "  inner class ResetResult(val data: Data) {\n\n    fun generateString(separator: String): String = \"$name average:$separator${data.generateString(roundingStrategy, unit, separator)}\"\n  }\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -4064478438725543690
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"createForLong\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-common/src/commonMain/kotlin/org/jetbrains/projector/common/statistics/Average.kt",
      "language": "kotlin",
      "line": 91,
      "offset": 8,
      "length": 13,
      "code": {
        "startLine": 89,
        "length": 13,
        "offset": 68,
        "surroundingCode": "      Average(DoubleValue(), unit, name, roundingStrategy)\n\n    fun createForLong(name: String, roundingStrategy: RoundingStrategy, unit: String? = null): Average<Long> =\n      Average(LongValue(), unit, name, roundingStrategy)\n  }"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -1931520777646567172
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"logger\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/md/PanelUpdater.kt",
      "language": "kotlin",
      "line": 38,
      "offset": 14,
      "length": 6,
      "code": {
        "startLine": 36,
        "length": 6,
        "offset": 44,
        "surroundingCode": "public object PanelUpdater {\n\n  private val logger = Logger<PanelUpdater>()\n\n  public var showCallback: ((id: Int, shown: Boolean) -> Unit)? = null"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -7789062798882002191
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"openInExternalBrowser\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/md/PanelUpdater.kt",
      "language": "kotlin",
      "line": 49,
      "offset": 13,
      "length": 21,
      "code": {
        "startLine": 47,
        "length": 21,
        "offset": 94,
        "surroundingCode": "  public var scrollCallback: ((id: Int, lastScrollOffset: Int) -> Unit)? = null\n\n  public fun openInExternalBrowser(link: String) {\n    Desktop.getDesktop().browse(URI(link))\n  }"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -6719729574619815696
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"updateAll\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/md/PanelUpdater.kt",
      "language": "kotlin",
      "line": 63,
      "offset": 13,
      "length": 9,
      "code": {
        "startLine": 61,
        "length": 9,
        "offset": 18,
        "surroundingCode": "  }\n\n  public fun updateAll() {\n    idToPanelLock.read {\n      idToPanel.keys.forEach {"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -2154972720862006253
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"render\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/md/PanelDelegate.kt",
      "language": "kotlin",
      "line": 97,
      "offset": 6,
      "length": 6,
      "code": {
        "startLine": 95,
        "length": 6,
        "offset": 11,
        "surroundingCode": "  }\n\n  fun render() {\n    if (!helperThreadOnceLaunched) {\n      Thread(helperThreadRunnable).start()"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": 8564997094731121308
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"setCSS\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/md/PanelDelegate.kt",
      "language": "kotlin",
      "line": 123,
      "offset": 6,
      "length": 6,
      "code": {
        "startLine": 121,
        "length": 6,
        "offset": 11,
        "surroundingCode": "  }\n\n  fun setCSS(inlineCss: String?, vararg fileUris: String?) {\n    lastInlineCss = inlineCss\n    lastCssFileUrls = fileUris.toList()"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": 8797152505230637457
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"setHtml\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/md/PanelDelegate.kt",
      "language": "kotlin",
      "line": 151,
      "offset": 6,
      "length": 7,
      "code": {
        "startLine": 149,
        "length": 7,
        "offset": 53,
        "surroundingCode": "\n  // added in JetBrains IDEs, version 2020.3+\n  fun setHtml(html: String, initialScrollOffset: Int) {\n    setHtml(html)\n    scrollToMarkdownSrcOffset(initialScrollOffset)"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": 230323473438023592
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"getComponent\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/md/PanelDelegate.kt",
      "language": "kotlin",
      "line": 156,
      "offset": 6,
      "length": 12,
      "code": {
        "startLine": 154,
        "length": 12,
        "offset": 11,
        "surroundingCode": "  }\n\n  fun getComponent(): JComponent {\n    return backingComponent\n  }"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": 8216296585886511620
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"dispose\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/md/PanelDelegate.kt",
      "language": "kotlin",
      "line": 166,
      "offset": 6,
      "length": 7,
      "code": {
        "startLine": 164,
        "length": 7,
        "offset": 11,
        "surroundingCode": "  }\n\n  fun dispose() {\n    disposed = true\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -2272774357307190120
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"DelegatingJvmLogger\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/log/DelegatingJvmLogger.kt",
      "language": "kotlin",
      "line": 35,
      "offset": 13,
      "length": 19,
      "code": {
        "startLine": 33,
        "length": 19,
        "offset": 82,
        "surroundingCode": "\n// todo: make it internal after moving ProjectorServer to this repo\npublic class DelegatingJvmLogger(tag: String) : Logger {\n\n  private var ideaLoggerState: IdeaLoggerState = IdeaLoggerState.WaitingIdeaLoggerState()"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": 3376696652955944194
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"IdeColors\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/IdeColors.kt",
      "language": "kotlin",
      "line": 38,
      "offset": 13,
      "length": 9,
      "code": {
        "startLine": 36,
        "length": 9,
        "offset": 88,
        "surroundingCode": " * Calls provided in constructor onColorsChanged action on LAF change.\n */\npublic class IdeColors(private val onColorsChanged: (ServerWindowColorsEvent.ColorsStorage) -> Unit) {\n\n  private val logger = Logger<IdeColors>()"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": 2081147180791347801
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"setKeymap\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/KeymapSetter.kt",
      "language": "kotlin",
      "line": 40,
      "offset": 13,
      "length": 9,
      "code": {
        "startLine": 38,
        "length": 9,
        "offset": 18,
        "surroundingCode": "  }\n\n  public fun setKeymap(keymap: UserKeymap) {\n    invokeWhenIdeaIsInitialized(\"set keymap to match user's OS ($keymap)\") { ideaClassLoader ->\n      SwingUtilities.invokeLater {"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": 6657231852770209183
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Object \"KeymapSetter\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/KeymapSetter.kt",
      "language": "kotlin",
      "line": 30,
      "offset": 14,
      "length": 12,
      "code": {
        "startLine": 28,
        "length": 12,
        "offset": 49,
        "surroundingCode": "import javax.swing.SwingUtilities\n\npublic object KeymapSetter {\n\n  private val logger = Logger<KeymapSetter>()"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -320227703016518545
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"addTaskToInitializeIdea\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/SettingsInitializer.kt",
      "language": "kotlin",
      "line": 91,
      "offset": 13,
      "length": 23,
      "code": {
        "startLine": 89,
        "length": 23,
        "offset": 18,
        "surroundingCode": "  }\n\n  public fun addTaskToInitializeIdea(defaultAa: Any?) {\n    invokeWhenIdeaIsInitialized(\"initialize IDEA: fix AA and disable smooth scrolling (at start)\") {\n      onIdeaInitialization(it, defaultAa)"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -6772043999778996376
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Object \"SettingsInitializer\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/SettingsInitializer.kt",
      "language": "kotlin",
      "line": 31,
      "offset": 14,
      "length": 19,
      "code": {
        "startLine": 29,
        "length": 19,
        "offset": 44,
        "surroundingCode": "import javax.swing.UIManager\n\npublic object SettingsInitializer {\n\n  private fun getIdeaComponentAntiAliasing(ideaClassLoader: ClassLoader): Any? {"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": 5005102808673709898
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"init\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/IjInjectorAgentInitializer.kt",
      "language": "kotlin",
      "line": 42,
      "offset": 13,
      "length": 4,
      "code": {
        "startLine": 40,
        "length": 4,
        "offset": 53,
        "surroundingCode": "\n  @OptIn(ExperimentalStdlibApi::class)\n  public fun init(isAgent: Boolean) {\n    invokeWhenIdeaIsInitialized(\"attach IJ injector agent\") { ideClassLoader ->\n      this.ijClassLoader = WeakReference(ideClassLoader)"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": 6504147749973974226
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Object \"IjInjectorAgentInitializer\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ij/IjInjectorAgentInitializer.kt",
      "language": "kotlin",
      "line": 32,
      "offset": 14,
      "length": 26,
      "code": {
        "startLine": 30,
        "length": 26,
        "offset": 50,
        "surroundingCode": "import java.lang.ref.WeakReference\n\npublic object IjInjectorAgentInitializer {\n\n  private lateinit var ijClassLoader: WeakReference<ClassLoader>"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": 2650216315857277334
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"focusOwnerOrTarget\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/util/Awt.kt",
      "language": "kotlin",
      "line": 29,
      "offset": 11,
      "length": 18,
      "code": {
        "startLine": 27,
        "length": 18,
        "offset": 49,
        "surroundingCode": "import java.awt.KeyboardFocusManager\n\npublic fun focusOwnerOrTarget(target: Component): Component {\n  val manager = KeyboardFocusManager.getCurrentKeyboardFocusManager()\n  return manager.focusOwner ?: target"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -5593095889083005120
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"getHostName\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/util/HostName.kt",
      "language": "kotlin",
      "line": 30,
      "offset": 11,
      "length": 11,
      "code": {
        "startLine": 28,
        "length": 11,
        "offset": 49,
        "surroundingCode": "import java.net.UnknownHostException\n\npublic fun getHostName(address: InetAddress): String? {\n  return try {\n    // The trailing '.' makes the name into a \"Fully Qualified Domain Name\", i.e. an absolute domain name."
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -2906147100657397826
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"defaultLaterInvokator\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/util/LaterInvokator.kt",
      "language": "kotlin",
      "line": 38,
      "offset": 15,
      "length": 21,
      "code": {
        "startLine": 36,
        "length": 21,
        "offset": 44,
        "surroundingCode": "  public companion object {\n\n    public val defaultLaterInvokator: LaterInvokator = object : LaterInvokator {\n\n      private val dispatchEventMethod = EventQueue::class.java.getDeclaredMethod(\"dispatchEvent\", AWTEvent::class.java).apply {"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -4515622502252238174
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"getIdBy\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/util/ObjectIdCacher.kt",
      "language": "kotlin",
      "line": 33,
      "offset": 13,
      "length": 7,
      "code": {
        "startLine": 31,
        "length": 7,
        "offset": 76,
        "surroundingCode": "  private val objectToId = mutableMapOf<ObjectType, IdType>()\n\n  public fun getIdBy(obj: ObjectType): IdType {\n    val id = objectToId[obj]\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -2198388925141630934
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"getObjectBy\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/util/ObjectIdCacher.kt",
      "language": "kotlin",
      "line": 49,
      "offset": 13,
      "length": 11,
      "code": {
        "startLine": 47,
        "length": 11,
        "offset": 18,
        "surroundingCode": "  }\n\n  public fun getObjectBy(id: IdType): ObjectType = requireNotNull(idToObject[id]) { \"No id $id found. Available ids: $idToObject\" }\n}"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": 763857877330124151
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"ObjectIdCacher\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/util/ObjectIdCacher.kt",
      "language": "kotlin",
      "line": 26,
      "offset": 13,
      "length": 14,
      "code": {
        "startLine": 24,
        "length": 14,
        "offset": 63,
        "surroundingCode": "package org.jetbrains.projector.server.core.util\n\npublic class ObjectIdCacher<IdType : Number, ObjectType : Any>(initialId: IdType, private val incrementer: (IdType) -> IdType) {\n\n  private var nextId = initialId"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -4249571696383404086
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"calculateNewTouchState\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toAwt/Mouse.kt",
      "language": "kotlin",
      "line": 52,
      "offset": 11,
      "length": 22,
      "code": {
        "startLine": 50,
        "length": 22,
        "offset": 68,
        "surroundingCode": "private const val PIXEL_DELTA_ENOUGH_FOR_SCROLLING = 10\n\npublic fun calculateNewTouchState(\n  shiftedMessage: ClientMouseEvent,\n  message: ClientMouseEvent,"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -275973896925189689
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"createMouseEvent\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toAwt/Mouse.kt",
      "language": "kotlin",
      "line": 84,
      "offset": 11,
      "length": 16,
      "code": {
        "startLine": 82,
        "length": 16,
        "offset": 14,
        "surroundingCode": "}\n\npublic fun createMouseEvent(\n  source: Component,\n  event: ClientMouseEvent,"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -7341484447277257
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"createMouseWheelEvent\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toAwt/Mouse.kt",
      "language": "kotlin",
      "line": 162,
      "offset": 11,
      "length": 21,
      "code": {
        "startLine": 160,
        "length": 21,
        "offset": 14,
        "surroundingCode": "}\n\npublic fun createMouseWheelEvent(source: Component, event: ClientWheelEvent, connectionMillis: Long): MouseWheelEvent {\n  fun isHorizontal(event: ClientWheelEvent): Boolean {\n    return event.deltaX.absoluteValue > event.deltaY.absoluteValue"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -2814787811742601970
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"shiftBounds\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toClient/Shift.kt",
      "language": "kotlin",
      "line": 31,
      "offset": 21,
      "length": 11,
      "code": {
        "startLine": 29,
        "length": 11,
        "offset": 56,
        "surroundingCode": "import java.awt.Point as AwtPoint\n\npublic fun Component.shiftBounds(shift: AwtPoint): CommonRectangle {\n  return with(bounds) {\n    CommonRectangle("
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": 3772851305110636928
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"toCommonIntSize\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toClient/Convert.kt",
      "language": "kotlin",
      "line": 43,
      "offset": 21,
      "length": 15,
      "code": {
        "startLine": 41,
        "length": 15,
        "offset": 72,
        "surroundingCode": "public fun Point2D.toPoint(): Point = Point(x, y)\n\npublic fun Dimension.toCommonIntSize(): CommonIntSize = CommonIntSize(width, height)\n\npublic fun Rectangle.toCommonRectangle(): CommonRectangle = CommonRectangle(x.toDouble(), y.toDouble(), width.toDouble(), height.toDouble())"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -3394372597144654174
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"toCommonRectangle\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toClient/Convert.kt",
      "language": "kotlin",
      "line": 45,
      "offset": 21,
      "length": 17,
      "code": {
        "startLine": 43,
        "length": 17,
        "offset": 107,
        "surroundingCode": "public fun Dimension.toCommonIntSize(): CommonIntSize = CommonIntSize(width, height)\n\npublic fun Rectangle.toCommonRectangle(): CommonRectangle = CommonRectangle(x.toDouble(), y.toDouble(), width.toDouble(), height.toDouble())\n\npublic fun Shape.toCommonPath(): CommonPath {"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": 3171442409694489039
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"toColor\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toClient/Convert.kt",
      "language": "kotlin",
      "line": 86,
      "offset": 18,
      "length": 7,
      "code": {
        "startLine": 84,
        "length": 7,
        "offset": 61,
        "surroundingCode": "\n/* Converts an ARGB number to a color. */\npublic fun Number.toColor(): Color = Color(this.toInt(), true)\n\npublic fun StrokeData.toStroke(): Stroke {"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -1087326531093523815
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"toStroke\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toClient/Convert.kt",
      "language": "kotlin",
      "line": 88,
      "offset": 22,
      "length": 8,
      "code": {
        "startLine": 86,
        "length": 8,
        "offset": 86,
        "surroundingCode": "public fun Number.toColor(): Color = Color(this.toInt(), true)\n\npublic fun StrokeData.toStroke(): Stroke {\n  when (this) {\n    is StrokeData.Basic -> {"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": 3694056640135327380
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"toCursorType\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toClient/Convert.kt",
      "language": "kotlin",
      "line": 142,
      "offset": 15,
      "length": 12,
      "code": {
        "startLine": 140,
        "length": 12,
        "offset": 18,
        "surroundingCode": "}\n\npublic fun Int.toCursorType(): CursorType = when (this) {\n  DEFAULT_CURSOR -> CursorType.DEFAULT\n  CROSSHAIR_CURSOR -> CursorType.CROSSHAIR"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -3613325325479250791
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"toPaintValue\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toClient/Convert.kt",
      "language": "kotlin",
      "line": 165,
      "offset": 17,
      "length": 12,
      "code": {
        "startLine": 163,
        "length": 12,
        "offset": 20,
        "surroundingCode": "}\n\npublic fun Paint.toPaintValue(): PaintValue = when (this) {\n  is Color -> PaintValue.Color(rgb)\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": 8127560904756932935
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"createSetClipEvent\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toClient/Convert.kt",
      "language": "kotlin",
      "line": 182,
      "offset": 11,
      "length": 18,
      "code": {
        "startLine": 180,
        "length": 18,
        "offset": 14,
        "surroundingCode": "}\n\npublic fun createSetClipEvent(identitySpaceClip: Shape?): ServerWindowStateEvent = ServerSetClipEvent(\n  with(identitySpaceClip) {\n    when (this) {"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -599184740554999271
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"toSetStrokeEvent\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toClient/Convert.kt",
      "language": "kotlin",
      "line": 194,
      "offset": 18,
      "length": 16,
      "code": {
        "startLine": 192,
        "length": 16,
        "offset": 21,
        "surroundingCode": ")\n\npublic fun Stroke.toSetStrokeEvent(): ServerWindowStateEvent = when (this) {\n  is BasicStroke -> ServerSetStrokeEvent(this.toBasicStrokeData())\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -3966914647249995712
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"toCommonComposite\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toClient/Convert.kt",
      "language": "kotlin",
      "line": 225,
      "offset": 21,
      "length": 17,
      "code": {
        "startLine": 223,
        "length": 17,
        "offset": 24,
        "surroundingCode": "}\n\npublic fun Composite.toCommonComposite(): CommonComposite = when (this) {\n  is AlphaComposite -> this.toCommonAlphaComposite()\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": 8922808274767116202
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"extractData\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toClient/Transform.kt",
      "language": "kotlin",
      "line": 32,
      "offset": 15,
      "length": 11,
      "code": {
        "startLine": 30,
        "length": 11,
        "offset": 49,
        "surroundingCode": "import java.awt.geom.Rectangle2D\n\npublic fun <E> extractData(iterable: MutableIterable<E>): List<E> {\n  val answer = mutableListOf<E>()\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -8458254787694750160
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"convertToSimpleList\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/convert/toClient/Transform.kt",
      "language": "kotlin",
      "line": 79,
      "offset": 41,
      "length": 19,
      "code": {
        "startLine": 77,
        "length": 19,
        "offset": 44,
        "surroundingCode": "}\n\npublic fun List<List<ServerWindowEvent>>.convertToSimpleList(): List<ServerWindowEvent> {\n  val answer = mutableListOf<ServerWindowEvent>()\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": 1637575014139034625
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"HttpWsClientBuilder\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/websocket/HttpWsClientBuilder.kt",
      "language": "kotlin",
      "line": 29,
      "offset": 13,
      "length": 19,
      "code": {
        "startLine": 27,
        "length": 19,
        "offset": 41,
        "surroundingCode": "import java.nio.ByteBuffer\n\npublic class HttpWsClientBuilder(private val relayUrl: String, private val serverId: String) : TransportBuilder() {\n\n  override fun build(): HttpWsClient {"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": 2573696111994205612
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"HttpWsServerBuilder\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/websocket/HttpWsServerBuilder.kt",
      "language": "kotlin",
      "line": 33,
      "offset": 13,
      "length": 19,
      "code": {
        "startLine": 31,
        "length": 19,
        "offset": 41,
        "surroundingCode": "import java.nio.ByteBuffer\n\npublic class HttpWsServerBuilder(private val host: InetAddress, private val port: Int): TransportBuilder() {\n\n  public lateinit var getMainWindows: () -> List<MainWindow>"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": 6056415109385205904
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"MultiTransportBuilder\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/websocket/MultiTransportBuilder.kt",
      "language": "kotlin",
      "line": 26,
      "offset": 13,
      "length": 21,
      "code": {
        "startLine": 24,
        "length": 21,
        "offset": 68,
        "surroundingCode": "package org.jetbrains.projector.server.core.websocket\n\npublic class MultiTransportBuilder(private val builders: List<TransportBuilder>) : TransportBuilder() {\n  override fun build(): HttpWsTransport {\n    val transports = builders.map { prepareBuilder(it) }.map { it.build() }"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -6191390383476318882
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"ConnectedClientSettings\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ClientSettings.kt",
      "language": "kotlin",
      "line": 43,
      "offset": 13,
      "length": 23,
      "code": {
        "startLine": 41,
        "length": 23,
        "offset": 16,
        "surroundingCode": "}\n\npublic class ConnectedClientSettings(\n  override val connectionMillis: Long,\n  override val address: String?,"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -8907721749726940536
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"SupportedHandshakeClientSettings\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ClientSettings.kt",
      "language": "kotlin",
      "line": 48,
      "offset": 13,
      "length": 32,
      "code": {
        "startLine": 46,
        "length": 32,
        "offset": 35,
        "surroundingCode": ") : ClientSettings()\n\npublic class SupportedHandshakeClientSettings(\n  override val connectionMillis: Long,\n  override val address: String?,"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -7485432479844789694
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"setUpClientData\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ClientSettings.kt",
      "language": "kotlin",
      "line": 64,
      "offset": 13,
      "length": 15,
      "code": {
        "startLine": 62,
        "length": 15,
        "offset": 85,
        "surroundingCode": "  override val connectionMillis: Long,\n  override val address: String?,\n  public val setUpClientData: SetUpClientData,\n) : ClientSettings()\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": 8153338993022520280
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"SetUpClientSettings\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ClientSettings.kt",
      "language": "kotlin",
      "line": 61,
      "offset": 13,
      "length": 19,
      "code": {
        "startLine": 59,
        "length": 19,
        "offset": 16,
        "surroundingCode": ")\n\npublic class SetUpClientSettings(\n  override val connectionMillis: Long,\n  override val address: String?,"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -7168701834958391739
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"setUpClientData\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ClientSettings.kt",
      "language": "kotlin",
      "line": 70,
      "offset": 13,
      "length": 15,
      "code": {
        "startLine": 68,
        "length": 15,
        "offset": 85,
        "surroundingCode": "  override val connectionMillis: Long,\n  override val address: String?,\n  public val setUpClientData: SetUpClientData,\n  bigCollectionSize: Int?,\n) : ClientSettings() {"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": 1813112953430770599
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"touchState\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ClientSettings.kt",
      "language": "kotlin",
      "line": 74,
      "offset": 13,
      "length": 10,
      "code": {
        "startLine": 72,
        "length": 10,
        "offset": 37,
        "surroundingCode": ") : ClientSettings() {\n\n  public var touchState: TouchState = TouchState.Released\n\n  public val requestedData: ConcurrentLinkedQueue<ServerEvent> by SizeAware(ConcurrentLinkedQueue<ServerEvent>(), bigCollectionSize, logger)"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -5081080903499895046
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"requestedData\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ClientSettings.kt",
      "language": "kotlin",
      "line": 76,
      "offset": 13,
      "length": 13,
      "code": {
        "startLine": 74,
        "length": 13,
        "offset": 72,
        "surroundingCode": "  public var touchState: TouchState = TouchState.Released\n\n  public val requestedData: ConcurrentLinkedQueue<ServerEvent> by SizeAware(ConcurrentLinkedQueue<ServerEvent>(), bigCollectionSize, logger)\n\n  private companion object {"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -1524022966505417176
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"ReadyClientSettings\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ClientSettings.kt",
      "language": "kotlin",
      "line": 67,
      "offset": 13,
      "length": 19,
      "code": {
        "startLine": 65,
        "length": 19,
        "offset": 35,
        "surroundingCode": ") : ClientSettings()\n\npublic class ReadyClientSettings(\n  override val connectionMillis: Long,\n  override val address: String?,"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -6818966825071269280
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"reason\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ClientSettings.kt",
      "language": "kotlin",
      "line": 111,
      "offset": 13,
      "length": 6,
      "code": {
        "startLine": 109,
        "length": 6,
        "offset": 85,
        "surroundingCode": "  override val connectionMillis: Long,\n  override val address: String?,\n  public val reason: String,\n) : ClientSettings()"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": 5952989361540446104
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Class \"ClosedClientSettings\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/ClientSettings.kt",
      "language": "kotlin",
      "line": 108,
      "offset": 13,
      "length": 20,
      "code": {
        "startLine": 106,
        "length": 20,
        "offset": 16,
        "surroundingCode": "}\n\npublic class ClosedClientSettings(\n  override val connectionMillis: Long,\n  override val address: String?,"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -4283881916663535559
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"send\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-swing/src/main/kotlin/org/jetbrains/projector/client/swing/ProjectorTransport.kt",
      "language": "kotlin",
      "line": 41,
      "offset": 6,
      "length": 4,
      "code": {
        "startLine": 39,
        "length": 4,
        "offset": 23,
        "surroundingCode": "  fun connect()\n\n  fun send(bytes: ByteArray)\n  fun send(string: String)\n}"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-swing.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": 2230095453035210333
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Property \"SCALING_RATIO\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-common/src/jsMain/kotlin/org/jetbrains/projector/client/common/misc/ParamsProvider.kt",
      "language": "kotlin",
      "line": 103,
      "offset": 6,
      "length": 13,
      "code": {
        "startLine": 101,
        "length": 13,
        "offset": 65,
        "surroundingCode": "  val BLOCK_CLOSING: Boolean\n  val LAYOUT_TYPE: LayoutType\n  val SCALING_RATIO: Double\n    get() = SYSTEM_SCALING_RATIO * USER_SCALING_RATIO\n"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-common.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": 8829865206492287317
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"arc\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-common/src/jsMain/kotlin/org/jetbrains/projector/client/common/canvas/DomContext2d.kt",
      "language": "kotlin",
      "line": 166,
      "offset": 6,
      "length": 3,
      "code": {
        "startLine": 164,
        "length": 3,
        "offset": 11,
        "surroundingCode": "  }\n\n  fun arc(x: Double, y: Double, radius: Double, startAngle: Double, endAngle: Double) {\n    myContext2d.arc(x, y, radius, startAngle, endAngle)\n  }"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-common.jsMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -9141735963950644057
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"addGraphicsCreationListener\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-common/src/jvmMain/kotlin/org/jetbrains/projector/client/common/canvas/SwingCanvas.kt",
      "language": "kotlin",
      "line": 75,
      "offset": 8,
      "length": 27,
      "code": {
        "startLine": 73,
        "length": 27,
        "offset": 119,
        "surroundingCode": "  companion object {\n    private val graphicsCreateListeners = ConcurrentHashMap<(Graphics2D) -> Unit, Unit>()\n    fun addGraphicsCreationListener(listener: (Graphics2D) -> Unit) {\n      graphicsCreateListeners[listener] = Unit\n    }"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-common.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": 3687079010798651221
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"removeGraphicsCreationListener\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-common/src/jvmMain/kotlin/org/jetbrains/projector/client/common/canvas/SwingCanvas.kt",
      "language": "kotlin",
      "line": 79,
      "offset": 8,
      "length": 30,
      "code": {
        "startLine": 77,
        "length": 30,
        "offset": 15,
        "surroundingCode": "    }\n\n    fun removeGraphicsCreationListener(listener: (Graphics2D) -> Unit) {\n      graphicsCreateListeners.remove(listener)\n    }"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-common.jvmMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -7742343701942793638
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Function \"collectGarbage\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-client-common/src/commonMain/kotlin/org/jetbrains/projector/client/common/misc/ImageCacher.kt",
      "language": "kotlin",
      "line": 58,
      "offset": 6,
      "length": 14,
      "code": {
        "startLine": 56,
        "length": 14,
        "offset": 108,
        "surroundingCode": "  private val offscreenImages = mutableMapOf<Long, OffscreenImage>()  // todo: support image removal\n\n  fun collectGarbage() {\n    if (currentSize > ParamsProvider.IMAGE_CACHE_SIZE_CHARS) {\n      filterDeadEntitiesOutOfMutableMap(cache)"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-client-common.commonMain",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -8906627006107690934
},{
  "tool": "Code Inspection",
  "category": "Redundant constructs",
  "type": "Unused symbol",
  "severity": "High",
  "comment": "Object \"IjInjectorAgent\" is never used",
  "detailsInfo": "<html>\n<body>\nThis inspection reports classes, functions or properties in the specified inspection scope that are not used or not reachable from entry points.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-agent-ij-injector/src/main/kotlin/org/jetbrains/projector/agent/ijInjector/IjInjectorAgent.kt",
      "language": "kotlin",
      "line": 30,
      "offset": 14,
      "length": 15,
      "code": {
        "startLine": 28,
        "length": 15,
        "offset": 59,
        "surroundingCode": "import java.lang.instrument.Instrumentation\n\npublic object IjInjectorAgent {\n\n  private val logger = Logger<IjInjectorAgent>()"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-agent-ij-injector.main",
    "inspectionName": "UnusedSymbol"
  },
  "hash": -4911377262340472249
},{
  "tool": "Code Inspection",
  "category": "Style issues",
  "type": "Accessor call that can be replaced with property access syntax",
  "severity": "Moderate",
  "comment": "Use of getter method instead of property access syntax",
  "detailsInfo": "<html>\n<body>\nThis inspection reports calls to Java <b>get</b> and <b>set</b> methods that can be replaced with the use of Kotlin synthetic properties.\n</body>\n</html>\n",
  "sources": [
    {
      "type": "file",
      "path": "projector-server-core/src/main/kotlin/org/jetbrains/projector/server/core/util/HostAddress.kt",
      "language": "kotlin",
      "line": 29,
      "offset": 72,
      "length": 10,
      "code": {
        "startLine": 27,
        "length": 10,
        "offset": 107,
        "surroundingCode": "import java.net.InetSocketAddress\n\npublic fun getWildcardHostAddress(): InetAddress = InetSocketAddress(0).getAddress()"
      }
    }
  ],
  "attributes": {
    "module": "projector-client.projector-server-core.main",
    "inspectionName": "UsePropertyAccessSyntax"
  },
  "hash": 3389181550776381709
}]}